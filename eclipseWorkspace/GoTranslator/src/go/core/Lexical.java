/* The following code was generated by JFlex 1.6.1 */

package go.core;

import java_cup.runtime.*;
/*

    OBSERVAÇÕES:

    Especificação do GO: https://golang.org/ref/spec#unicode_letter
    Exemplo para a linguagem JAVA: https://github.com/moy/JFlex/blob/master/jflex/examples/java/java.flex
    Documentação JFLEX: http://jflex.de/manual.html#ExampleLexRules
    Tutorialzinho legal: https://www.skenz.it/compilers/classroom/practice1_6.pdf
    Projeto de uma galera das antigas com JFLEX/Cup para C: https://github.com/brunomb/CCompiler

    Caracter "_" é considerado uma letra em GO.
    a-f dá matche em todos os caracteres de a até f
    [xX] dá matche em x ou X
    [^] dá matche em TODOS os caracteres
    [.] dá matche em todos os caracteres menos fim de linhas UNICODE

    Unicode letters = [:letter:]
    Unidode digits = [:digit:]

*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>eclipseWorkspace/GoTranslator/spec/rules.flex</tt>
 */
public class Lexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\5\1\4\1\27\1\30\1\3\22\0\1\65\1\66\1\31"+
    "\2\0\1\104\1\63\1\0\1\67\1\70\1\7\1\62\1\102\1\23"+
    "\1\24\1\6\1\16\1\52\1\53\1\55\1\51\1\20\1\50\1\20"+
    "\1\54\1\2\1\101\1\103\1\72\1\64\1\76\2\0\4\17\1\22"+
    "\1\17\21\1\1\21\2\1\1\73\1\26\1\74\1\75\1\13\1\25"+
    "\1\44\1\34\1\43\1\60\1\11\1\56\1\42\1\40\1\15\1\1"+
    "\1\57\1\14\1\45\1\10\1\41\1\46\1\1\1\32\1\37\1\36"+
    "\1\33\1\61\1\12\1\47\1\35\1\1\1\77\1\71\1\100\7\0"+
    "\1\27\44\0\1\0\12\0\1\0\4\0\1\0\5\0\27\0\1\0"+
    "\37\0\1\0\u01ca\0\4\0\14\0\16\0\5\0\7\0\1\0\1\0"+
    "\1\0\201\0\5\0\1\0\2\0\2\0\4\0\1\0\1\0\6\0"+
    "\1\0\1\0\3\0\1\0\1\0\1\0\24\0\1\0\123\0\1\0"+
    "\213\0\10\0\246\0\1\0\46\0\2\0\1\0\7\0\47\0\110\0"+
    "\33\0\5\0\3\0\55\0\53\0\43\0\2\0\1\0\143\0\1\0"+
    "\1\0\17\0\2\0\7\0\2\0\12\0\3\0\2\0\1\0\20\0"+
    "\1\0\1\0\36\0\35\0\131\0\13\0\1\0\30\0\41\0\11\0"+
    "\2\0\4\0\1\0\5\0\26\0\4\0\1\0\11\0\1\0\3\0"+
    "\1\0\27\0\31\0\107\0\23\0\121\0\66\0\3\0\1\0\22\0"+
    "\1\0\7\0\12\0\17\0\20\0\4\0\10\0\2\0\2\0\2\0"+
    "\26\0\1\0\7\0\1\0\1\0\3\0\4\0\3\0\1\0\20\0"+
    "\1\0\15\0\2\0\1\0\3\0\16\0\2\0\23\0\6\0\4\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\2\0\1\0"+
    "\2\0\37\0\4\0\1\0\1\0\23\0\3\0\20\0\11\0\1\0"+
    "\3\0\1\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\3\0"+
    "\1\0\22\0\1\0\17\0\2\0\43\0\10\0\2\0\2\0\2\0"+
    "\26\0\1\0\7\0\1\0\2\0\1\0\5\0\3\0\1\0\36\0"+
    "\2\0\1\0\3\0\17\0\1\0\21\0\1\0\1\0\6\0\3\0"+
    "\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0\3\0"+
    "\2\0\3\0\3\0\3\0\14\0\26\0\1\0\64\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\20\0\3\0\1\0\32\0\2\0\6\0"+
    "\2\0\43\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0"+
    "\5\0\3\0\1\0\40\0\1\0\1\0\2\0\17\0\2\0\22\0"+
    "\10\0\1\0\3\0\1\0\51\0\2\0\1\0\20\0\1\0\21\0"+
    "\2\0\30\0\6\0\5\0\22\0\3\0\30\0\1\0\11\0\1\0"+
    "\1\0\2\0\7\0\72\0\60\0\1\0\2\0\14\0\7\0\72\0"+
    "\2\0\1\0\1\0\2\0\2\0\1\0\1\0\2\0\1\0\6\0"+
    "\4\0\1\0\7\0\1\0\3\0\1\0\1\0\1\0\1\0\2\0"+
    "\2\0\1\0\4\0\1\0\2\0\11\0\1\0\2\0\5\0\1\0"+
    "\1\0\25\0\4\0\40\0\1\0\77\0\10\0\1\0\44\0\33\0"+
    "\5\0\163\0\53\0\24\0\1\0\20\0\6\0\4\0\4\0\3\0"+
    "\1\0\3\0\2\0\7\0\3\0\4\0\15\0\14\0\1\0\21\0"+
    "\46\0\1\0\1\0\5\0\1\0\2\0\53\0\1\0\u014d\0\1\0"+
    "\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\51\0\1\0"+
    "\4\0\2\0\41\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0"+
    "\4\0\2\0\17\0\1\0\71\0\1\0\4\0\2\0\103\0\45\0"+
    "\20\0\20\0\125\0\14\0\u026c\0\2\0\21\0\1\0\32\0\5\0"+
    "\113\0\6\0\10\0\7\0\15\0\1\0\4\0\16\0\22\0\16\0"+
    "\22\0\16\0\15\0\1\0\3\0\17\0\64\0\43\0\1\0\4\0"+
    "\1\0\103\0\130\0\10\0\51\0\1\0\1\0\5\0\106\0\12\0"+
    "\37\0\61\0\36\0\2\0\5\0\13\0\54\0\25\0\7\0\70\0"+
    "\27\0\11\0\65\0\122\0\1\0\135\0\57\0\21\0\7\0\67\0"+
    "\36\0\15\0\2\0\12\0\54\0\32\0\44\0\51\0\3\0\12\0"+
    "\44\0\153\0\4\0\1\0\4\0\3\0\2\0\11\0\300\0\100\0"+
    "\u0116\0\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0"+
    "\7\0\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0"+
    "\6\0\4\0\15\0\5\0\3\0\1\0\7\0\53\0\1\27\1\27"+
    "\107\0\1\0\15\0\1\0\20\0\15\0\145\0\1\0\4\0\1\0"+
    "\2\0\12\0\1\0\1\0\3\0\5\0\6\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\4\0\1\0\13\0\2\0\4\0\5\0\5\0"+
    "\4\0\1\0\64\0\2\0\u0a7b\0\57\0\1\0\57\0\1\0\205\0"+
    "\6\0\4\0\3\0\2\0\14\0\46\0\1\0\1\0\5\0\1\0"+
    "\2\0\70\0\7\0\1\0\20\0\27\0\11\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\120\0\1\0\u01d5\0\2\0\52\0\5\0\5\0\2\0"+
    "\4\0\126\0\6\0\3\0\1\0\132\0\1\0\4\0\5\0\51\0"+
    "\3\0\136\0\21\0\33\0\65\0\20\0\u0200\0\u19b6\0\112\0\u51cd\0"+
    "\63\0\u048d\0\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0"+
    "\24\0\57\0\20\0\37\0\2\0\106\0\61\0\11\0\2\0\147\0"+
    "\2\0\4\0\1\0\36\0\2\0\2\0\105\0\13\0\1\0\3\0"+
    "\1\0\4\0\1\0\27\0\35\0\64\0\16\0\62\0\76\0\6\0"+
    "\3\0\1\0\16\0\34\0\12\0\27\0\31\0\35\0\7\0\57\0"+
    "\34\0\1\0\20\0\5\0\1\0\12\0\12\0\5\0\1\0\51\0"+
    "\27\0\3\0\1\0\10\0\24\0\27\0\3\0\1\0\3\0\62\0"+
    "\1\0\1\0\3\0\2\0\2\0\5\0\2\0\1\0\1\0\1\0"+
    "\30\0\3\0\2\0\13\0\7\0\3\0\14\0\6\0\2\0\6\0"+
    "\2\0\6\0\11\0\7\0\1\0\7\0\1\0\53\0\1\0\4\0"+
    "\4\0\2\0\132\0\43\0\35\0\u2ba4\0\14\0\27\0\4\0\61\0"+
    "\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0\5\0\1\0"+
    "\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0\1\0\2\0"+
    "\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0\2\0\66\0"+
    "\50\0\14\0\164\0\5\0\1\0\207\0\44\0\32\0\6\0\32\0"+
    "\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0"+
    "\43\0\14\0\1\0\32\0\1\0\23\0\1\0\2\0\1\0\17\0"+
    "\2\0\16\0\42\0\173\0\u0185\0\35\0\3\0\61\0\57\0\40\0"+
    "\20\0\21\0\1\0\10\0\6\0\46\0\12\0\36\0\2\0\44\0"+
    "\4\0\10\0\60\0\236\0\142\0\50\0\10\0\64\0\234\0\u0137\0"+
    "\11\0\26\0\12\0\10\0\230\0\6\0\2\0\1\0\1\0\54\0"+
    "\1\0\2\0\3\0\1\0\2\0\27\0\12\0\27\0\11\0\37\0"+
    "\141\0\26\0\12\0\32\0\106\0\70\0\6\0\2\0\100\0\1\0"+
    "\17\0\4\0\1\0\3\0\1\0\33\0\54\0\35\0\3\0\35\0"+
    "\43\0\10\0\1\0\34\0\33\0\66\0\12\0\26\0\12\0\23\0"+
    "\15\0\22\0\156\0\111\0\u03ba\0\65\0\113\0\55\0\40\0\31\0"+
    "\32\0\44\0\51\0\43\0\3\0\1\0\14\0\60\0\16\0\4\0"+
    "\25\0\1\0\45\0\22\0\1\0\31\0\204\0\57\0\46\0\10\0"+
    "\2\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0"+
    "\3\0\1\0\37\0\5\0\u011e\0\60\0\24\0\2\0\1\0\1\0"+
    "\270\0\57\0\121\0\60\0\24\0\1\0\73\0\53\0\u01f5\0\100\0"+
    "\37\0\1\0\u01c0\0\71\0\u0507\0\u0399\0\u0c67\0\u042f\0\u33d1\0\u0239\0"+
    "\7\0\37\0\161\0\36\0\22\0\60\0\20\0\4\0\37\0\25\0"+
    "\5\0\23\0\u0370\0\105\0\13\0\1\0\102\0\15\0\u4060\0\2\0"+
    "\u0bfe\0\153\0\5\0\15\0\3\0\11\0\7\0\12\0\u1766\0\125\0"+
    "\1\0\107\0\1\0\2\0\2\0\1\0\2\0\2\0\2\0\4\0"+
    "\1\0\14\0\1\0\1\0\1\0\7\0\1\0\101\0\1\0\4\0"+
    "\2\0\10\0\1\0\7\0\1\0\34\0\1\0\4\0\1\0\5\0"+
    "\1\0\1\0\3\0\7\0\1\0\u0154\0\2\0\31\0\1\0\31\0"+
    "\1\0\37\0\1\0\31\0\1\0\37\0\1\0\31\0\1\0\37\0"+
    "\1\0\31\0\1\0\37\0\1\0\31\0\1\0\10\0\u1034\0\305\0"+
    "\u053b\0\4\0\1\0\33\0\1\0\2\0\1\0\1\0\2\0\1\0"+
    "\1\0\12\0\1\0\4\0\1\0\1\0\1\0\1\0\6\0\1\0"+
    "\4\0\1\0\1\0\1\0\1\0\1\0\1\0\3\0\1\0\2\0"+
    "\1\0\1\0\2\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\2\0\1\0\1\0\2\0\4\0\1\0\7\0"+
    "\1\0\4\0\1\0\4\0\1\0\1\0\1\0\12\0\1\0\21\0"+
    "\5\0\3\0\1\0\5\0\1\0\21\0\u1144\0\ua6d7\0\51\0\u1035\0"+
    "\13\0\336\0\u3fe2\0\u021e\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\1\5\1\6\3\2"+
    "\1\7\1\10\1\11\2\1\14\2\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\2\0"+
    "\1\34\1\35\1\36\1\0\1\37\1\40\4\2\1\41"+
    "\1\0\1\7\1\42\1\43\1\44\2\0\1\45\3\0"+
    "\14\2\1\46\13\2\1\47\1\0\1\50\1\51\1\0"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\35\1\0\2\36\3\0"+
    "\2\2\1\66\1\2\1\67\21\2\1\70\3\2\1\71"+
    "\2\2\1\72\1\73\1\74\1\75\1\76\1\77\1\36"+
    "\2\0\1\100\1\101\1\102\3\2\1\103\3\2\1\104"+
    "\1\2\1\105\1\2\1\106\1\107\1\110\4\2\1\111"+
    "\1\112\1\113\3\2\1\114\2\2\1\115\3\2\1\0"+
    "\2\100\1\2\1\116\1\117\1\120\2\2\1\121\3\2"+
    "\1\122\1\2\1\123\3\2\1\124\1\2\1\125\4\2"+
    "\1\126\1\2\1\0\1\2\1\127\1\130\1\2\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\7\2\1\0\1\2"+
    "\1\137\2\2\1\140\1\141\1\142\1\2\1\143\1\0"+
    "\1\2\1\144\3\2\1\0\1\145\1\146\2\2\1\0"+
    "\1\147\1\2\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\105\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816"+
    "\0\105\0\105\0\u085b\0\u08a0\0\105\0\105\0\u08e5\0\u092a"+
    "\0\105\0\105\0\u096f\0\105\0\105\0\u09b4\0\u09f9\0\u0a3e"+
    "\0\105\0\u0a83\0\u0ac8\0\u0b0d\0\105\0\105\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\212\0\u0c66\0\u0cab\0\u0cf0\0\105\0\105"+
    "\0\u0d35\0\u0381\0\105\0\u0d7a\0\u03c6\0\u0dbf\0\u0e04\0\u0e49"+
    "\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071"+
    "\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\105\0\u147c"+
    "\0\105\0\105\0\u14c1\0\105\0\105\0\105\0\105\0\105"+
    "\0\105\0\u1506\0\105\0\105\0\u154b\0\105\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd"+
    "\0\u1842\0\u1887\0\105\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\212\0\u1d61\0\u1da6\0\u1deb"+
    "\0\212\0\u1e30\0\u1e75\0\212\0\105\0\105\0\105\0\105"+
    "\0\105\0\105\0\u1eba\0\u1eff\0\u1f44\0\212\0\212\0\u1f89"+
    "\0\u1fce\0\u2013\0\212\0\u2058\0\u209d\0\u20e2\0\212\0\u2127"+
    "\0\u216c\0\u21b1\0\212\0\212\0\212\0\u21f6\0\u223b\0\u2280"+
    "\0\u22c5\0\212\0\212\0\212\0\u230a\0\u234f\0\u2394\0\212"+
    "\0\u23d9\0\u241e\0\212\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577"+
    "\0\105\0\u25bc\0\212\0\212\0\212\0\u2601\0\u2646\0\212"+
    "\0\u268b\0\u26d0\0\u2715\0\212\0\u275a\0\212\0\u279f\0\u27e4"+
    "\0\u2829\0\212\0\u286e\0\212\0\u28b3\0\u28f8\0\u293d\0\u2982"+
    "\0\212\0\u29c7\0\u2a0c\0\u2a51\0\212\0\212\0\u2a96\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\212\0\u2d48"+
    "\0\u2d8d\0\212\0\212\0\212\0\u2dd2\0\212\0\u2e17\0\u2e5c"+
    "\0\212\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\212\0\212\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\212\0\u3084\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\3"+
    "\1\11\2\3\1\12\1\13\1\14\1\3\1\4\2\3"+
    "\1\15\1\16\1\17\2\2\1\6\1\20\1\21\1\22"+
    "\1\23\1\3\1\24\1\25\2\3\1\26\1\27\1\3"+
    "\1\30\1\31\1\3\6\4\1\32\1\3\1\33\1\34"+
    "\1\35\1\36\1\37\1\6\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\106\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\30\3\25\0\1\4\6\0\1\60\3\0"+
    "\1\61\1\4\1\0\1\4\1\0\1\60\1\0\1\62"+
    "\23\0\6\4\33\0\1\6\106\0\1\63\1\64\54\0"+
    "\1\65\104\0\1\66\21\0\2\3\5\0\4\3\1\67"+
    "\6\3\1\0\1\57\5\0\30\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\7\3\1\70\20\3\24\0"+
    "\2\3\5\0\1\71\12\3\1\0\1\57\5\0\13\3"+
    "\1\72\10\3\1\73\3\3\25\0\1\74\6\0\1\60"+
    "\4\0\1\75\1\0\1\75\1\76\1\60\1\0\1\62"+
    "\22\0\1\76\4\75\1\74\1\75\52\0\1\77\40\0"+
    "\1\100\22\0\1\62\13\0\1\62\1\0\1\62\3\0"+
    "\1\101\23\0\6\62\27\0\25\102\1\103\1\104\56\102"+
    "\26\105\1\106\2\105\1\103\53\105\1\0\2\3\5\0"+
    "\1\3\1\107\11\3\1\0\1\57\5\0\1\3\1\110"+
    "\10\3\1\111\15\3\24\0\2\3\5\0\5\3\1\112"+
    "\5\3\1\0\1\57\5\0\30\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\1\113\2\3\1\114\3\3"+
    "\1\115\20\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\3\3\1\116\24\3\24\0\2\3\5\0\1\3"+
    "\1\117\1\120\10\3\1\0\1\57\5\0\4\3\1\121"+
    "\1\3\1\122\21\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\7\3\1\123\20\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\6\3\1\124\1\125\2\3"+
    "\1\126\15\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\12\3\1\127\15\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\12\3\1\130\15\3\24\0\2\3"+
    "\5\0\4\3\1\131\6\3\1\0\1\57\5\0\1\3"+
    "\1\132\5\3\1\133\2\3\1\134\15\3\24\0\2\3"+
    "\5\0\1\3\1\135\11\3\1\0\1\57\5\0\30\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\12\3"+
    "\1\136\15\3\105\0\1\137\1\0\1\140\103\0\1\141"+
    "\1\142\10\0\1\143\73\0\1\144\104\0\1\145\104\0"+
    "\1\146\4\0\1\147\36\0\1\150\40\0\1\151\5\0"+
    "\1\152\76\0\1\153\104\0\1\154\11\0\1\155\72\0"+
    "\1\65\104\0\1\156\21\0\1\157\6\0\6\157\1\0"+
    "\1\157\1\0\2\157\7\0\16\157\6\0\4\157\25\0"+
    "\1\160\13\0\1\160\1\0\1\160\2\0\1\161\24\0"+
    "\6\160\4\0\1\161\24\0\1\62\6\0\1\60\3\0"+
    "\1\61\1\62\1\0\1\62\1\0\1\60\25\0\6\62"+
    "\27\0\4\162\1\163\100\162\6\164\1\165\1\166\75\164"+
    "\1\0\2\3\5\0\13\3\1\0\1\57\5\0\5\3"+
    "\1\167\22\3\24\0\2\3\5\0\1\170\12\3\1\0"+
    "\1\57\5\0\30\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\4\3\1\171\23\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\14\3\1\172\13\3\25\0"+
    "\1\74\6\0\1\60\4\0\1\74\1\0\1\74\1\0"+
    "\1\60\1\0\1\62\23\0\6\74\31\0\1\74\6\0"+
    "\1\60\4\0\1\75\1\0\1\75\1\0\1\60\1\0"+
    "\1\62\23\0\4\75\1\74\1\75\31\0\1\76\6\0"+
    "\1\76\4\0\3\76\1\0\1\76\11\0\1\76\6\0"+
    "\2\76\3\0\7\76\1\0\1\76\50\0\1\173\60\0"+
    "\3\102\2\0\22\102\2\0\54\102\3\105\2\0\22\105"+
    "\2\0\54\105\1\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\4\3\1\174\23\3\24\0\2\3\5\0\1\175"+
    "\12\3\1\0\1\57\5\0\30\3\24\0\2\3\5\0"+
    "\1\176\12\3\1\0\1\57\5\0\30\3\24\0\2\3"+
    "\5\0\1\177\12\3\1\0\1\57\5\0\30\3\24\0"+
    "\2\3\5\0\1\3\1\200\11\3\1\0\1\57\5\0"+
    "\30\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\4\3\1\201\23\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\7\3\1\202\20\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\14\3\1\203\13\3\24\0"+
    "\2\3\5\0\4\3\1\204\6\3\1\0\1\57\5\0"+
    "\30\3\24\0\2\3\5\0\5\3\1\205\5\3\1\0"+
    "\1\57\5\0\30\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\1\206\27\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\7\3\1\207\20\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\4\3\1\210\23\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\12\3"+
    "\1\211\15\3\24\0\2\3\5\0\1\212\12\3\1\0"+
    "\1\57\5\0\13\3\1\213\14\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\5\3\1\214\22\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\14\3\1\215"+
    "\13\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\11\3\1\216\16\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\7\3\1\217\20\3\24\0\2\3\5\0"+
    "\1\220\12\3\1\0\1\57\5\0\30\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\1\221\27\3\24\0"+
    "\2\3\5\0\4\3\1\222\6\3\1\0\1\57\5\0"+
    "\30\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\24\3\1\223\3\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\1\224\27\3\110\0\1\225\103\0\1\226"+
    "\1\227\103\0\1\230\104\0\1\231\21\0\2\157\5\0"+
    "\13\157\7\0\30\157\25\0\1\160\12\0\1\61\1\160"+
    "\1\0\1\160\27\0\6\160\31\0\1\160\13\0\1\160"+
    "\1\0\1\160\27\0\6\160\27\0\4\162\1\232\100\162"+
    "\10\0\1\233\74\0\6\164\1\0\1\166\75\164\7\0"+
    "\1\234\103\0\1\235\77\0\2\3\5\0\1\3\1\236"+
    "\11\3\1\0\1\57\5\0\30\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\10\3\1\237\17\3\24\0"+
    "\2\3\5\0\1\3\1\240\11\3\1\0\1\57\5\0"+
    "\16\3\1\241\1\3\1\242\1\3\1\243\1\244\4\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\7\3"+
    "\1\245\20\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\1\3\1\246\26\3\24\0\2\3\5\0\1\3"+
    "\1\247\11\3\1\0\1\57\5\0\30\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\10\3\1\250\17\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\4\3"+
    "\1\251\23\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\12\3\1\252\15\3\24\0\2\3\5\0\1\3"+
    "\1\253\11\3\1\0\1\57\5\0\30\3\24\0\2\3"+
    "\5\0\4\3\1\254\6\3\1\0\1\57\5\0\30\3"+
    "\24\0\2\3\5\0\1\3\1\255\11\3\1\0\1\57"+
    "\5\0\30\3\24\0\2\3\5\0\1\3\1\256\11\3"+
    "\1\0\1\57\5\0\30\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\4\3\1\257\23\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\1\3\1\260\26\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\1\261"+
    "\27\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\7\3\1\262\20\3\24\0\2\3\5\0\1\263\12\3"+
    "\1\0\1\57\5\0\1\264\27\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\4\3\1\265\1\266\22\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\14\3"+
    "\1\267\13\3\24\0\2\3\5\0\1\3\1\270\11\3"+
    "\1\0\1\57\5\0\30\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\25\3\1\271\2\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\12\3\1\272\15\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\11\3"+
    "\1\273\16\3\24\0\2\3\5\0\4\3\1\274\6\3"+
    "\1\0\1\57\5\0\30\3\24\0\2\3\5\0\1\3"+
    "\1\275\11\3\1\0\1\57\5\0\12\3\1\276\15\3"+
    "\34\0\1\277\101\0\1\232\101\0\1\300\1\301\101\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\1\302\27\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\17\3"+
    "\1\303\10\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\16\3\1\304\11\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\21\3\1\305\6\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\1\306\27\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\1\307\27\3"+
    "\24\0\2\3\5\0\1\3\1\310\11\3\1\0\1\57"+
    "\5\0\30\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\14\3\1\311\1\3\1\312\1\3\1\313\1\3"+
    "\1\314\1\315\4\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\25\3\1\316\2\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\11\3\1\317\16\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\11\3\1\320"+
    "\16\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\11\3\1\321\16\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\4\3\1\322\23\3\24\0\2\3\5\0"+
    "\5\3\1\323\5\3\1\0\1\57\5\0\30\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\4\3\1\324"+
    "\23\3\24\0\2\3\5\0\4\3\1\325\6\3\1\0"+
    "\1\57\5\0\30\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\12\3\1\326\15\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\4\3\1\327\23\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\4\3\1\330"+
    "\23\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\1\331\27\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\1\3\1\332\26\3\35\0\1\333\76\0\1\301"+
    "\101\0\2\3\5\0\13\3\1\0\1\57\5\0\24\3"+
    "\1\334\3\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\4\3\1\335\23\3\24\0\2\3\5\0\1\336"+
    "\12\3\1\0\1\57\5\0\30\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\4\3\1\337\23\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\17\3\1\340"+
    "\10\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\16\3\1\341\11\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\21\3\1\342\6\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\4\3\1\343\23\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\6\3\1\344"+
    "\21\3\24\0\2\3\5\0\13\3\1\0\1\57\5\0"+
    "\4\3\1\345\23\3\24\0\2\3\5\0\1\346\12\3"+
    "\1\0\1\57\5\0\30\3\24\0\2\3\5\0\1\3"+
    "\1\347\11\3\1\0\1\57\5\0\30\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\10\3\1\350\17\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\16\3"+
    "\1\351\4\3\1\352\4\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\6\3\1\353\21\3\24\0\2\3"+
    "\5\0\4\3\1\354\6\3\1\0\1\57\5\0\30\3"+
    "\36\0\1\355\72\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\12\3\1\356\15\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\1\357\27\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\1\3\1\360\26\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\15\3\1\361"+
    "\12\3\24\0\2\3\5\0\1\3\1\362\11\3\1\0"+
    "\1\57\5\0\30\3\24\0\2\3\5\0\13\3\1\0"+
    "\1\57\5\0\17\3\1\363\10\3\24\0\2\3\5\0"+
    "\13\3\1\0\1\57\5\0\21\3\1\364\6\3\24\0"+
    "\2\3\5\0\13\3\1\0\1\57\5\0\1\365\27\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\4\3"+
    "\1\366\23\3\37\0\1\367\71\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\11\3\1\370\16\3\24\0\2\3"+
    "\5\0\1\3\1\371\11\3\1\0\1\57\5\0\30\3"+
    "\24\0\2\3\5\0\13\3\1\0\1\57\5\0\16\3"+
    "\1\372\1\3\1\373\7\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\7\3\1\374\20\3\40\0\1\375"+
    "\70\0\2\3\5\0\1\3\1\376\11\3\1\0\1\57"+
    "\5\0\30\3\24\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\17\3\1\377\10\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\21\3\1\u0100\6\3\24\0\2\3"+
    "\5\0\13\3\1\0\1\57\5\0\1\3\1\u0101\26\3"+
    "\33\0\1\u0102\75\0\2\3\5\0\13\3\1\0\1\57"+
    "\5\0\22\3\1\u0103\5\3\24\0\2\3\5\0\13\3"+
    "\1\0\1\57\5\0\10\3\1\u0104\17\3\34\0\1\232"+
    "\74\0\2\3\5\0\13\3\1\0\1\57\5\0\6\3"+
    "\1\u0105\21\3\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12489];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\32\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\2\11\1\1\2\0\1\11\2\1"+
    "\1\0\2\11\5\1\1\0\2\1\2\11\2\0\1\11"+
    "\3\0\30\1\1\11\1\0\2\11\1\0\6\11\1\1"+
    "\2\11\1\1\1\11\2\1\1\0\2\1\3\0\4\1"+
    "\1\11\31\1\6\11\2\0\42\1\1\0\1\1\1\11"+
    "\31\1\1\0\21\1\1\0\11\1\1\0\5\1\1\0"+
    "\4\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* Para criar um novo java_cup.runtime.Symbol com informação sobre
       o token atual, mas esse tipo de token não tem valor associado.
    */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Também cria um new java_cup.runtime.Symbol Com informação
       sobre o token atual, mas esse objeto tem um valor. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2338) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Erro léxico caractere ilegal:" + yytext() +
                                                              " na linha " + yyline + ", " + " coluna " + yycolumn);
            }
          case 105: break;
          case 2: 
            { return symbol(sym.IDENTIFIER, yytext());
            }
          case 106: break;
          case 3: 
            { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 107: break;
          case 4: 
            { /* Ignore */
            }
          case 108: break;
          case 5: 
            { return symbol(sym.DIV);
            }
          case 109: break;
          case 6: 
            { return symbol(sym.MULT);
            }
          case 110: break;
          case 7: 
            { return symbol(sym.OCTAL_LITERAL, yytext());
            }
          case 111: break;
          case 8: 
            { return symbol(sym.MINUS);
            }
          case 112: break;
          case 9: 
            { return symbol(sym.DOT);
            }
          case 113: break;
          case 10: 
            { return symbol(sym.PLUS);
            }
          case 114: break;
          case 11: 
            { return symbol(sym.AND);
            }
          case 115: break;
          case 12: 
            { return symbol(sym.EQ);
            }
          case 116: break;
          case 13: 
            { return symbol(sym.NOT);
            }
          case 117: break;
          case 14: 
            { return symbol(sym.LPAREN);
            }
          case 118: break;
          case 15: 
            { return symbol(sym.RPAREN);
            }
          case 119: break;
          case 16: 
            { return symbol(sym.PIPE);
            }
          case 120: break;
          case 17: 
            { return symbol(sym.LT);
            }
          case 121: break;
          case 18: 
            { return symbol(sym.LBRACK);
            }
          case 122: break;
          case 19: 
            { return symbol(sym.RBRACK);
            }
          case 123: break;
          case 20: 
            { return symbol(sym.CIRCU);
            }
          case 124: break;
          case 21: 
            { return symbol(sym.GT);
            }
          case 125: break;
          case 22: 
            { return symbol(sym.LBRACE);
            }
          case 126: break;
          case 23: 
            { return symbol(sym.RBRACE);
            }
          case 127: break;
          case 24: 
            { return symbol(sym.COLON);
            }
          case 128: break;
          case 25: 
            { return symbol(sym.COMMA);
            }
          case 129: break;
          case 26: 
            { return symbol(sym.SEMICOLON);
            }
          case 130: break;
          case 27: 
            { return symbol(sym.MOD);
            }
          case 131: break;
          case 28: 
            { return symbol(sym.IMAGINARY_LITERAL, yytext());
            }
          case 132: break;
          case 29: 
            { return symbol(sym.FLOATING_POINT_LITERAL, new Float(yytext()));
            }
          case 133: break;
          case 30: 
            { /* ignore */
            }
          case 134: break;
          case 31: 
            { return symbol(sym.DIVEQ);
            }
          case 135: break;
          case 32: 
            { return symbol(sym.MULTEQ);
            }
          case 136: break;
          case 33: 
            { return symbol(sym.IF);
            }
          case 137: break;
          case 34: 
            { return symbol(sym.HEX_LITERAL, yytext());
            }
          case 138: break;
          case 35: 
            { return symbol(sym.MINUSMINUS);
            }
          case 139: break;
          case 36: 
            { return symbol(sym.MINUSEQ);
            }
          case 140: break;
          case 37: 
            { return symbol(sym.STRING_LITERAL, yytext());
            }
          case 141: break;
          case 38: 
            { return symbol(sym.GO);
            }
          case 142: break;
          case 39: 
            { return symbol(sym.PLUSPLUS);
            }
          case 143: break;
          case 40: 
            { return symbol(sym.ANDAND);
            }
          case 144: break;
          case 41: 
            { return symbol(sym.ANDEQ);
            }
          case 145: break;
          case 42: 
            { return symbol(sym.EQEQ);
            }
          case 146: break;
          case 43: 
            { return symbol(sym.NOTEQ);
            }
          case 147: break;
          case 44: 
            { return symbol(sym.PIPEEQ);
            }
          case 148: break;
          case 45: 
            { return symbol(sym.PIPEPIPE);
            }
          case 149: break;
          case 46: 
            { return symbol(sym.ARRLEFT);
            }
          case 150: break;
          case 47: 
            { return symbol(sym.LTEQ);
            }
          case 151: break;
          case 48: 
            { return symbol(sym.LSHIFT);
            }
          case 152: break;
          case 49: 
            { return symbol(sym.CIRCUEQ);
            }
          case 153: break;
          case 50: 
            { return symbol(sym.GTEQ);
            }
          case 154: break;
          case 51: 
            { return symbol(sym.RSHIFT);
            }
          case 155: break;
          case 52: 
            { return symbol(sym.MODEQ);
            }
          case 156: break;
          case 53: 
            { return symbol(sym.QUALIFIED_IDENTIFIER, yytext());
            }
          case 157: break;
          case 54: 
            { return symbol(sym.INT);
            }
          case 158: break;
          case 55: 
            { return symbol(sym.ELLIPSIS);
            }
          case 159: break;
          case 56: 
            { return symbol(sym.MAP);
            }
          case 160: break;
          case 57: 
            { return symbol(sym.FOR);
            }
          case 161: break;
          case 58: 
            { return symbol(sym.VAR);
            }
          case 162: break;
          case 59: 
            { return symbol(sym.PLUSEQ);
            }
          case 163: break;
          case 60: 
            { return symbol(sym.ANDNOTEQ);
            }
          case 164: break;
          case 61: 
            { return symbol(sym.ANDNOT);
            }
          case 165: break;
          case 62: 
            { return symbol(sym.LSHIFTEQ);
            }
          case 166: break;
          case 63: 
            { return symbol(sym.RSHIFTEQ);
            }
          case 167: break;
          case 64: 
            { yyline++; yybegin(0);
            }
          case 168: break;
          case 65: 
            { return symbol(sym.ELSE);
            }
          case 169: break;
          case 66: 
            { return symbol(sym.LONG);
            }
          case 170: break;
          case 67: 
            { return symbol(sym.INT8);
            }
          case 171: break;
          case 68: 
            { return symbol(sym.RUNE);
            }
          case 172: break;
          case 69: 
            { return symbol(sym.UINT);
            }
          case 173: break;
          case 70: 
            { return symbol(sym.BYTE);
            }
          case 174: break;
          case 71: 
            { return symbol(sym.BOOL);
            }
          case 175: break;
          case 72: 
            { return symbol(sym.TYPE);
            }
          case 176: break;
          case 73: 
            { return symbol(sym.GOTO);
            }
          case 177: break;
          case 74: 
            { return symbol(sym.CHAN);
            }
          case 178: break;
          case 75: 
            { return symbol(sym.CHAR);
            }
          case 179: break;
          case 76: 
            { return symbol(sym.CASE);
            }
          case 180: break;
          case 77: 
            { return symbol(sym.FUNC);
            }
          case 181: break;
          case 78: 
            { return symbol(sym.INT64);
            }
          case 182: break;
          case 79: 
            { return symbol(sym.INT16);
            }
          case 183: break;
          case 80: 
            { return symbol(sym.INT32);
            }
          case 184: break;
          case 81: 
            { return symbol(sym.RANGE);
            }
          case 185: break;
          case 82: 
            { return symbol(sym.UINT8);
            }
          case 186: break;
          case 83: 
            { return symbol(sym.BREAK);
            }
          case 187: break;
          case 84: 
            { return symbol(sym.SHORT);
            }
          case 188: break;
          case 85: 
            { return symbol(sym.CONST);
            }
          case 189: break;
          case 86: 
            { return symbol(sym.DEFER);
            }
          case 190: break;
          case 87: 
            { return symbol(sym.IMPORT);
            }
          case 191: break;
          case 88: 
            { return symbol(sym.RETURN);
            }
          case 192: break;
          case 89: 
            { return symbol(sym.UINT64);
            }
          case 193: break;
          case 90: 
            { return symbol(sym.UINT16);
            }
          case 194: break;
          case 91: 
            { return symbol(sym.UINT32);
            }
          case 195: break;
          case 92: 
            { return symbol(sym.SELECT);
            }
          case 196: break;
          case 93: 
            { return symbol(sym.SWITCH);
            }
          case 197: break;
          case 94: 
            { return symbol(sym.STRUCT);
            }
          case 198: break;
          case 95: 
            { return symbol(sym.UINTPTR);
            }
          case 199: break;
          case 96: 
            { return symbol(sym.PACKAGE);
            }
          case 200: break;
          case 97: 
            { return symbol(sym.FLOAT64);
            }
          case 201: break;
          case 98: 
            { return symbol(sym.FLOAT32);
            }
          case 202: break;
          case 99: 
            { return symbol(sym.DEFAULT);
            }
          case 203: break;
          case 100: 
            { return symbol(sym.CONTINUE);
            }
          case 204: break;
          case 101: 
            { return symbol(sym.INTERFACE);
            }
          case 205: break;
          case 102: 
            { return symbol(sym.COMPLEX64);
            }
          case 206: break;
          case 103: 
            { return symbol(sym.COMPLEX128);
            }
          case 207: break;
          case 104: 
            { return symbol(sym.FALLTHROUGH);
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexical [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexical scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexical(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
