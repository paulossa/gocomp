/* The following code was generated by JFlex 1.6.1 */

package go.core;

import java_cup.runtime.*;
/*

    OBSERVAÇÕES:

    Especificação do GO: https://golang.org/ref/spec#unicode_letter
    Exemplo para a linguagem JAVA: https://github.com/moy/JFlex/blob/master/jflex/examples/java/java.flex
    Documentação JFLEX: http://jflex.de/manual.html#ExampleLexRules
    Tutorialzinho legal: https://www.skenz.it/compilers/classroom/practice1_6.pdf
    Projeto de uma galera das antigas com JFLEX/Cup para C: https://github.com/brunomb/CCompiler

    Caracter "_" é considerado uma letra em GO.
    a-f dá matche em todos os caracteres de a até f
    [xX] dá matche em x ou X
    [^] dá matche em TODOS os caracteres
    [.] dá matche em todos os caracteres menos fim de linhas UNICODE

    Unicode letters = [:letter:]
    Unidode digits = [:digit:]

*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>eclipseProject/GoTranslator/spec/rules.flex</tt>
 */
public class Lexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\5\1\4\1\32\1\33\1\3\16\2\4\0\1\62\1\63"+
    "\1\35\1\0\1\1\1\101\1\60\1\0\1\64\1\65\1\7\1\57"+
    "\1\77\1\26\1\27\1\6\1\21\7\23\2\20\1\76\1\100\1\67"+
    "\1\61\1\73\2\0\4\22\1\25\1\22\21\17\1\24\2\17\1\70"+
    "\1\31\1\71\1\72\1\13\1\30\1\40\1\36\1\46\1\42\1\11"+
    "\1\43\1\50\1\54\1\15\1\17\1\41\1\14\1\52\1\10\1\51"+
    "\1\53\1\17\1\37\1\47\1\45\1\44\1\56\1\12\1\24\1\55"+
    "\1\17\1\74\1\66\1\75\1\0\6\2\1\34\32\2\2\0\4\1"+
    "\4\0\1\17\2\0\1\2\7\0\1\17\4\0\1\17\5\0\27\17"+
    "\1\0\37\17\1\0\u01ca\17\4\0\14\17\16\0\5\17\7\0\1\17"+
    "\1\0\1\17\21\0\160\2\5\17\1\0\2\17\2\0\4\17\1\0"+
    "\1\16\6\0\1\17\1\0\3\17\1\0\1\17\1\0\24\17\1\0"+
    "\123\17\1\0\213\17\1\0\5\2\2\0\236\17\10\16\1\0\46\17"+
    "\2\0\1\17\7\0\47\17\7\0\1\1\1\0\55\2\1\0\1\2"+
    "\1\0\2\2\1\0\2\2\1\0\1\2\10\0\33\17\5\0\3\17"+
    "\15\0\5\2\6\0\1\1\4\0\13\2\5\0\53\17\37\2\4\0"+
    "\2\17\1\2\143\17\1\0\1\17\10\2\1\0\6\2\2\17\2\2"+
    "\1\0\4\2\2\17\12\2\3\17\2\0\1\17\17\0\1\2\1\17"+
    "\1\2\36\17\33\2\2\0\131\17\13\2\1\17\16\0\12\2\41\17"+
    "\11\2\2\17\4\0\1\17\5\0\26\17\4\2\1\17\11\2\1\17"+
    "\3\2\1\17\5\2\22\0\31\17\3\2\104\0\1\17\1\16\13\17"+
    "\6\16\61\0\33\2\1\0\4\2\66\17\3\2\1\17\22\2\1\17"+
    "\7\2\12\17\2\2\2\0\12\2\1\0\7\17\1\16\7\17\1\16"+
    "\3\2\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17\1\0"+
    "\1\17\3\0\4\17\2\0\1\2\1\17\7\2\2\0\2\2\2\0"+
    "\3\2\1\17\10\0\1\2\4\0\2\17\1\0\3\17\2\2\2\0"+
    "\12\2\2\17\2\1\7\0\1\1\5\0\3\2\1\0\6\17\4\0"+
    "\2\17\2\0\26\17\1\0\7\17\1\0\2\17\1\0\2\17\1\0"+
    "\2\17\2\0\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0"+
    "\1\2\7\0\4\17\1\0\1\17\7\0\14\2\3\17\1\2\13\0"+
    "\3\2\1\0\11\17\1\0\3\17\1\0\26\17\1\0\7\17\1\0"+
    "\2\17\1\0\5\17\2\0\1\2\1\17\10\2\1\0\3\2\1\0"+
    "\3\2\2\0\1\17\17\0\2\17\2\2\2\0\12\2\1\0\1\1"+
    "\17\0\3\2\1\0\10\17\2\0\2\17\2\0\26\17\1\0\7\17"+
    "\1\0\2\17\1\0\5\17\2\0\1\2\1\17\7\2\2\0\2\2"+
    "\2\0\3\2\10\0\2\2\4\0\2\17\1\0\3\17\2\2\2\0"+
    "\12\2\1\0\1\17\20\0\1\2\1\17\1\0\6\17\3\0\3\17"+
    "\1\0\4\17\3\0\2\17\1\0\1\17\1\0\2\17\3\0\2\17"+
    "\3\0\3\17\3\0\14\17\4\0\5\2\3\0\3\2\1\0\4\2"+
    "\2\0\1\17\6\0\1\2\16\0\12\2\11\0\1\1\7\0\3\2"+
    "\1\0\10\17\1\0\3\17\1\0\27\17\1\0\12\17\1\16\5\17"+
    "\3\0\1\17\7\2\1\0\3\2\1\0\4\2\7\0\2\2\1\0"+
    "\2\17\6\0\2\17\2\2\2\0\12\2\22\0\2\2\1\0\10\17"+
    "\1\0\3\17\1\0\27\17\1\0\12\17\1\0\5\17\2\0\1\2"+
    "\1\17\7\2\1\0\3\2\1\0\4\2\7\0\2\2\7\0\1\17"+
    "\1\0\2\17\2\2\2\0\12\2\1\0\2\17\17\0\2\2\1\0"+
    "\10\17\1\0\3\17\1\0\51\17\2\0\1\17\7\2\1\0\3\2"+
    "\1\0\4\2\1\17\10\0\1\2\10\0\2\17\2\2\2\0\12\2"+
    "\12\0\6\17\2\0\2\2\1\0\22\17\3\0\30\17\1\0\11\17"+
    "\1\0\1\17\2\0\7\17\3\0\1\2\4\0\6\2\1\0\1\2"+
    "\1\0\10\2\22\0\2\2\15\0\60\17\1\2\2\17\7\2\4\0"+
    "\1\1\7\17\10\2\1\0\12\2\47\0\2\17\1\0\1\17\2\0"+
    "\2\17\1\0\1\17\2\0\1\17\6\0\4\17\1\0\7\17\1\0"+
    "\3\17\1\0\1\17\1\0\1\17\2\0\2\17\1\0\4\17\1\2"+
    "\2\17\6\2\1\0\2\2\1\17\2\0\5\17\1\0\1\17\1\0"+
    "\6\2\2\0\12\2\2\0\4\17\40\0\1\17\27\0\2\2\6\0"+
    "\12\2\13\0\1\2\1\0\1\2\1\0\1\2\4\0\2\2\10\17"+
    "\1\0\44\17\4\0\24\2\1\0\2\2\5\17\13\2\1\0\44\2"+
    "\11\0\1\2\71\0\53\17\24\2\1\17\12\2\6\0\6\17\4\2"+
    "\4\17\3\2\1\17\3\2\2\17\7\2\3\17\4\2\15\17\14\2"+
    "\1\17\17\2\2\0\46\17\1\0\1\17\5\0\1\17\2\0\53\17"+
    "\1\0\u014d\17\1\0\4\17\2\0\7\17\1\0\1\17\1\0\4\17"+
    "\2\0\51\17\1\0\4\17\2\0\41\17\1\0\4\17\2\0\7\17"+
    "\1\0\1\17\1\0\4\17\2\0\17\17\1\0\71\17\1\0\4\17"+
    "\2\0\103\17\2\0\3\2\40\0\20\17\20\0\125\17\14\0\u026c\17"+
    "\2\0\21\17\1\0\32\17\5\0\113\17\3\0\3\1\10\16\7\0"+
    "\15\17\1\0\4\17\3\2\13\0\22\17\3\2\13\0\22\17\2\2"+
    "\14\0\15\17\1\0\3\17\1\0\2\2\14\0\64\17\40\2\3\0"+
    "\1\17\3\0\1\1\1\17\1\2\2\0\12\2\41\0\3\2\2\0"+
    "\12\2\6\0\130\17\10\0\51\17\1\2\1\17\5\0\106\17\12\0"+
    "\35\17\2\16\1\0\14\2\4\0\14\2\12\0\12\2\36\17\2\0"+
    "\5\17\13\0\54\17\4\0\21\2\7\17\2\2\6\0\12\2\46\0"+
    "\27\17\5\2\4\0\65\17\12\2\1\0\35\2\2\0\13\2\6\0"+
    "\12\2\15\0\1\17\130\0\5\2\57\17\21\2\7\17\4\0\12\2"+
    "\21\0\11\2\14\0\3\2\36\17\15\2\2\17\12\2\54\17\16\2"+
    "\14\0\44\17\24\2\10\0\12\2\3\0\3\17\12\2\44\17\122\0"+
    "\3\2\1\0\25\2\4\17\1\2\4\17\3\2\2\17\11\0\300\17"+
    "\47\2\25\0\4\2\u0116\17\2\0\6\17\2\0\46\17\2\0\6\17"+
    "\2\0\10\17\1\0\1\17\1\0\1\17\1\0\1\17\1\0\37\17"+
    "\2\0\65\17\1\0\7\17\1\0\1\17\3\0\3\17\1\0\7\17"+
    "\3\0\4\17\2\0\6\17\4\0\15\17\5\0\3\17\1\0\7\17"+
    "\16\0\5\2\30\0\1\32\1\32\5\2\20\0\2\1\23\0\1\1"+
    "\13\0\5\2\5\0\6\2\1\0\1\17\15\0\1\17\20\0\15\17"+
    "\3\0\33\1\25\0\15\2\4\0\1\2\3\0\14\2\21\0\1\17"+
    "\4\0\1\17\2\0\12\17\1\0\1\17\3\0\5\17\6\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\0\4\17\1\0\13\17\2\0\4\17"+
    "\5\0\5\17\4\0\1\17\21\0\43\1\2\17\4\1\u0a77\0\57\17"+
    "\1\0\57\17\1\0\205\17\6\0\4\17\3\2\2\17\14\0\46\17"+
    "\1\0\1\17\5\0\1\17\2\0\70\17\7\0\1\17\17\0\1\2"+
    "\27\17\11\0\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0"+
    "\7\17\1\0\7\17\1\0\7\17\1\0\7\17\1\0\40\2\57\0"+
    "\1\17\u01d5\0\2\17\1\1\31\0\11\1\6\2\1\0\5\17\2\0"+
    "\3\1\2\17\4\0\126\17\2\0\2\2\2\0\3\17\1\0\132\17"+
    "\1\0\4\17\5\0\51\17\3\0\136\17\21\0\33\17\65\0\20\17"+
    "\u0200\0\u19b6\17\112\0\u51cd\17\63\0\u048d\17\103\0\56\17\2\0\u010d\17"+
    "\3\0\20\17\12\2\2\17\24\0\57\17\1\2\4\0\12\2\1\0"+
    "\31\17\6\16\1\0\1\2\106\17\12\1\2\2\45\0\11\17\2\0"+
    "\147\17\2\0\4\17\1\0\4\17\14\16\13\17\3\16\2\0\2\16"+
    "\105\0\1\16\12\17\1\2\3\17\1\2\4\17\1\2\27\17\5\2"+
    "\20\0\1\1\7\0\64\17\14\0\2\2\62\17\21\2\13\0\12\2"+
    "\6\0\22\2\6\17\3\0\1\17\4\0\12\2\34\17\10\2\2\0"+
    "\27\17\15\2\14\0\35\17\3\0\4\2\57\17\16\2\16\0\1\17"+
    "\12\2\6\0\5\16\1\0\12\16\12\0\5\16\1\0\51\17\16\2"+
    "\11\0\3\17\1\2\10\17\2\2\2\0\12\2\6\0\27\17\3\0"+
    "\1\17\1\2\2\0\2\16\60\17\1\2\1\17\3\2\2\17\2\2"+
    "\5\17\2\2\1\17\1\2\1\17\30\0\3\17\2\0\13\17\5\2"+
    "\2\0\3\17\2\2\12\0\6\17\2\0\6\17\2\0\6\17\11\0"+
    "\7\17\1\0\7\17\1\0\53\16\1\0\4\16\4\0\2\16\132\0"+
    "\43\17\10\2\1\0\2\2\2\0\12\2\6\0\u2ba4\17\14\0\27\17"+
    "\4\0\61\17\u2104\0\u016e\17\2\0\152\17\46\0\7\17\14\0\5\17"+
    "\5\0\1\17\1\2\12\17\1\0\15\17\1\0\5\17\1\0\1\17"+
    "\1\0\2\17\1\0\2\17\1\0\154\17\41\0\u016b\17\22\0\100\17"+
    "\2\0\66\17\50\0\14\17\1\1\3\0\20\2\20\0\7\2\14\0"+
    "\2\1\30\0\3\1\31\0\1\1\6\0\5\17\1\0\207\17\2\0"+
    "\1\2\4\0\1\1\13\0\12\2\7\0\32\17\4\0\1\1\1\0"+
    "\32\17\13\0\131\17\3\0\6\17\2\0\6\17\2\0\6\17\2\0"+
    "\3\17\3\0\2\1\3\0\2\1\22\0\3\2\4\0\14\17\1\0"+
    "\32\17\1\0\23\17\1\0\2\17\1\0\17\17\2\0\16\17\42\0"+
    "\173\17\105\0\65\1\210\0\1\2\202\0\35\17\3\0\61\17\57\0"+
    "\37\17\1\16\20\0\21\17\1\1\10\17\1\1\5\0\46\16\12\0"+
    "\36\17\2\0\44\17\4\0\10\17\1\0\5\1\52\0\236\17\2\0"+
    "\12\2\126\0\50\16\10\0\64\16\234\0\u0137\16\11\0\26\16\12\0"+
    "\10\16\230\0\6\17\2\0\1\17\1\0\54\17\1\0\2\17\3\0"+
    "\1\17\2\0\27\17\12\0\27\16\11\0\37\16\141\0\26\17\12\0"+
    "\32\17\106\0\70\17\6\0\2\17\100\0\1\17\3\2\1\0\2\2"+
    "\5\0\4\2\4\17\1\0\3\17\1\0\33\17\4\0\3\2\4\0"+
    "\1\2\40\0\35\17\3\0\35\16\43\0\10\16\1\0\34\16\33\0"+
    "\66\17\12\0\26\17\12\0\23\17\15\0\22\16\156\0\111\17\u03b7\0"+
    "\3\2\65\17\17\2\37\0\12\2\20\0\3\2\55\17\13\2\2\0"+
    "\1\2\22\0\31\17\7\0\12\2\6\0\3\2\44\17\16\2\1\0"+
    "\12\2\20\0\43\16\3\0\1\16\11\0\3\2\60\17\16\2\4\17"+
    "\13\0\12\2\1\16\45\0\22\16\1\0\31\16\204\0\57\16\46\0"+
    "\10\16\2\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16\1\0"+
    "\5\16\3\0\1\16\37\0\5\16\u011e\0\60\16\24\0\2\16\1\0"+
    "\1\16\270\0\57\16\121\0\60\16\24\0\1\16\73\0\53\17\15\2"+
    "\10\0\12\2\u01d6\0\100\16\37\0\1\16\u01c0\0\71\16\u0507\0\u036f\17"+
    "\52\16\147\0\143\1\u0b9d\0\u042f\17\u33d1\0\u0239\17\7\0\37\16\161\0"+
    "\36\16\22\0\60\16\20\0\4\16\37\0\25\16\5\0\23\16\u0370\0"+
    "\105\17\13\0\1\17\56\2\20\0\4\2\15\17\u4060\0\2\17\u0bfe\0"+
    "\153\16\5\0\15\16\3\0\11\16\7\0\12\16\u14cb\0\5\2\3\0"+
    "\26\2\2\0\7\2\36\0\4\2\224\0\3\2\u01bb\0\125\17\1\0"+
    "\107\17\1\0\2\17\2\0\1\17\2\0\2\17\2\0\4\17\1\0"+
    "\14\17\1\0\1\17\1\0\7\17\1\0\101\17\1\0\4\17\2\0"+
    "\10\17\1\0\7\17\1\0\34\17\1\0\4\17\1\0\5\17\1\0"+
    "\1\17\3\0\7\17\1\0\u0154\17\2\0\31\17\1\0\31\17\1\0"+
    "\37\17\1\0\31\17\1\0\37\17\1\0\31\17\1\0\37\17\1\0"+
    "\31\17\1\0\37\17\1\0\31\17\1\0\10\17\2\0\62\2\u1000\0"+
    "\305\16\u053b\0\4\17\1\0\33\17\1\0\2\17\1\0\1\17\2\0"+
    "\1\17\1\0\12\17\1\0\4\17\1\0\1\17\1\0\1\17\6\0"+
    "\1\17\4\0\1\17\1\0\1\17\1\0\1\17\1\0\3\17\1\0"+
    "\2\17\1\0\1\17\2\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\2\17\1\0\1\17\2\0\4\17\1\0"+
    "\7\17\1\0\4\17\1\0\4\17\1\0\1\17\1\0\12\17\1\0"+
    "\21\17\5\0\3\17\1\0\5\17\1\0\21\17\u1144\0\ua6d7\17\51\0"+
    "\u1035\17\13\0\336\17\u3fe2\0\u021e\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\4\6\1\7"+
    "\1\10\1\11\1\12\2\1\13\6\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\6"+
    "\1\0\1\35\1\36\2\2\1\37\1\2\1\0\1\40"+
    "\1\41\1\0\1\10\1\42\1\43\1\44\2\0\1\45"+
    "\3\0\16\2\1\46\3\2\1\47\1\0\1\50\1\51"+
    "\1\0\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\2\6\3\0\3\2\1\41"+
    "\1\0\1\65\6\2\1\66\10\2\1\67\1\2\1\70"+
    "\1\71\1\72\1\73\1\74\2\0\1\75\1\76\10\2"+
    "\1\77\1\100\1\101\2\2\1\102\3\2\1\103\1\2"+
    "\1\0\2\75\2\2\1\104\1\2\1\105\1\106\3\2"+
    "\1\107\4\2\1\0\1\2\1\110\1\111\3\2\1\112"+
    "\1\113\1\114\1\2\1\0\1\2\1\115\2\2\1\116"+
    "\1\0\2\2\1\117\1\0\1\120\1\2\1\0\1\2"+
    "\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\102\0\u0108\0\u014a\0\204"+
    "\0\u018c\0\u01ce\0\102\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318"+
    "\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738"+
    "\0\102\0\102\0\u077a\0\u07bc\0\102\0\102\0\u07fe\0\u0840"+
    "\0\102\0\102\0\u0882\0\102\0\102\0\u08c4\0\u0906\0\u0948"+
    "\0\102\0\102\0\u098a\0\u09cc\0\204\0\u0a0e\0\u0a50\0\102"+
    "\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\102\0\102\0\u0b9a\0\u0318"+
    "\0\102\0\u0bdc\0\u035a\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36"+
    "\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\102\0\u1104"+
    "\0\102\0\102\0\u1146\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\u1188\0\102\0\102\0\u11ca\0\102\0\u120c\0\u124e"+
    "\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e"+
    "\0\102\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\204"+
    "\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa"+
    "\0\204\0\u183c\0\204\0\102\0\102\0\102\0\102\0\u187e"+
    "\0\u18c0\0\u1902\0\204\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\204\0\204\0\204\0\u1b54\0\u1b96"+
    "\0\204\0\u1bd8\0\u1c1a\0\u1c5c\0\204\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\102\0\u1d64\0\u1da6\0\204\0\u1de8\0\204\0\204\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\204\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8"+
    "\0\u203a\0\204\0\204\0\u207c\0\u20be\0\u2100\0\204\0\204"+
    "\0\204\0\u2142\0\u2184\0\u21c6\0\204\0\u2208\0\u224a\0\204"+
    "\0\u228c\0\u22ce\0\u2310\0\204\0\u2352\0\204\0\u2394\0\u23d6"+
    "\0\u2418\0\204";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\2\5\1\6\1\7\1\10"+
    "\1\11\3\10\1\12\1\13\1\10\1\14\1\15\1\10"+
    "\1\14\2\10\1\16\1\17\1\20\2\2\1\5\1\2"+
    "\1\21\1\22\1\23\2\10\1\24\1\25\1\10\1\26"+
    "\1\27\1\30\1\31\1\10\1\32\1\33\2\10\1\34"+
    "\1\35\1\36\1\37\1\5\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\103\0\2\3\5\0\6\3\1\0"+
    "\7\3\6\0\1\3\1\0\21\3\27\0\1\5\103\0"+
    "\1\57\1\60\51\0\1\61\101\0\1\62\21\0\2\3"+
    "\5\0\4\3\1\63\1\3\1\0\7\3\6\0\1\3"+
    "\1\0\21\3\24\0\2\3\5\0\1\64\5\3\1\0"+
    "\7\3\6\0\1\3\1\0\5\3\1\65\6\3\1\66"+
    "\4\3\34\0\1\67\3\0\1\70\2\0\2\14\1\0"+
    "\1\14\1\0\1\67\1\0\1\71\63\0\1\67\6\0"+
    "\1\72\1\73\1\0\1\73\1\74\1\67\1\0\1\71"+
    "\100\0\1\75\32\0\1\76\40\0\2\71\1\0\1\71"+
    "\3\0\1\77\52\0\30\100\1\101\1\102\50\100\31\103"+
    "\1\104\3\103\1\101\44\103\1\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\1\3\1\105\17\3"+
    "\24\0\2\3\5\0\1\3\1\106\4\3\1\0\7\3"+
    "\6\0\1\3\1\0\2\3\1\107\16\3\24\0\2\3"+
    "\5\0\1\3\1\110\4\3\1\0\7\3\6\0\1\3"+
    "\1\0\21\3\24\0\2\3\5\0\6\3\1\0\7\3"+
    "\6\0\1\3\1\0\2\3\1\111\3\3\1\112\4\3"+
    "\1\113\5\3\24\0\2\3\5\0\6\3\1\0\7\3"+
    "\6\0\1\3\1\0\17\3\1\114\1\3\24\0\2\3"+
    "\5\0\6\3\1\0\7\3\6\0\1\3\1\0\2\3"+
    "\1\115\10\3\1\116\2\3\1\117\2\3\24\0\2\3"+
    "\5\0\1\3\1\120\1\121\3\3\1\0\7\3\6\0"+
    "\1\3\1\0\7\3\1\122\11\3\24\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\13\3\1\123"+
    "\5\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\2\3\1\124\16\3\24\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\2\3\1\125"+
    "\16\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\2\3\1\126\16\3\102\0\1\127\1\0"+
    "\1\130\100\0\1\131\1\132\10\0\1\133\70\0\1\134"+
    "\101\0\1\135\101\0\1\136\4\0\1\137\41\0\1\140"+
    "\32\0\1\141\5\0\1\142\73\0\1\143\101\0\1\144"+
    "\11\0\1\145\67\0\1\61\101\0\1\146\20\0\4\147"+
    "\1\150\75\147\6\151\1\152\1\153\72\151\1\0\2\3"+
    "\5\0\6\3\1\0\7\3\6\0\1\3\1\0\11\3"+
    "\1\154\7\3\24\0\2\3\5\0\6\3\1\0\7\3"+
    "\6\0\1\3\1\0\7\3\1\155\11\3\24\0\2\3"+
    "\5\0\6\3\1\0\7\3\6\0\1\3\1\0\15\3"+
    "\1\156\3\3\43\0\2\157\1\0\1\157\2\0\1\160"+
    "\30\0\1\160\33\0\1\67\3\0\1\70\2\0\2\71"+
    "\1\0\1\71\1\0\1\67\65\0\1\67\6\0\2\72"+
    "\1\0\1\72\1\0\1\67\1\0\1\71\63\0\1\67"+
    "\6\0\1\72\1\73\1\0\1\73\1\0\1\67\1\0"+
    "\1\71\63\0\1\74\6\0\4\74\1\0\1\74\10\0"+
    "\1\74\1\0\1\74\1\0\2\74\2\0\1\74\62\0"+
    "\1\161\52\0\3\100\2\0\25\100\3\0\45\100\3\103"+
    "\2\0\25\103\3\0\45\103\1\0\2\3\5\0\1\3"+
    "\1\162\4\3\1\0\7\3\6\0\1\3\1\0\21\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\7\3\1\163\11\3\24\0\2\3\5\0\1\164"+
    "\5\3\1\0\7\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\5\3\1\165\13\3\24\0\2\3\5\0\4\3\1\166"+
    "\1\3\1\0\7\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\1\167\5\3\1\0\7\3\6\0\1\3"+
    "\1\0\21\3\24\0\2\3\5\0\6\3\1\0\7\3"+
    "\6\0\1\3\1\0\1\3\1\170\17\3\24\0\2\3"+
    "\5\0\6\3\1\0\7\3\6\0\1\3\1\0\15\3"+
    "\1\171\3\3\24\0\2\3\5\0\6\3\1\0\7\3"+
    "\6\0\1\3\1\0\11\3\1\172\7\3\24\0\2\3"+
    "\5\0\1\173\5\3\1\0\7\3\6\0\1\3\1\0"+
    "\21\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\2\3\1\174\16\3\24\0\2\3\5\0"+
    "\4\3\1\175\1\3\1\0\7\3\6\0\1\3\1\0"+
    "\21\3\24\0\2\3\5\0\5\3\1\176\1\0\7\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\1\3\1\177\17\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\7\3\1\200\11\3\24\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\15\3\1\201\3\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\10\3\1\202\10\3\24\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\1\3\1\203\17\3"+
    "\105\0\1\132\100\0\1\204\1\205\100\0\1\206\101\0"+
    "\1\207\20\0\4\147\1\13\75\147\10\0\1\210\71\0"+
    "\6\151\1\0\1\153\72\151\7\0\1\211\100\0\1\212"+
    "\74\0\2\3\5\0\1\3\1\213\4\3\1\0\7\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\1\3"+
    "\1\214\4\3\1\0\7\3\6\0\1\3\1\0\21\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\13\3\1\215\5\3\40\0\1\70\2\0\2\157"+
    "\1\0\1\157\76\0\2\157\1\0\1\157\57\0\2\3"+
    "\5\0\6\3\1\0\7\3\6\0\1\3\1\0\2\3"+
    "\1\216\16\3\24\0\2\3\5\0\6\3\1\0\7\3"+
    "\6\0\1\3\1\0\6\3\1\217\12\3\24\0\2\3"+
    "\5\0\6\3\1\0\7\3\6\0\1\3\1\0\12\3"+
    "\1\220\6\3\24\0\2\3\5\0\1\3\1\221\4\3"+
    "\1\0\7\3\6\0\1\3\1\0\2\3\1\222\16\3"+
    "\24\0\2\3\5\0\4\3\1\223\1\3\1\0\7\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\10\3\1\224\10\3"+
    "\24\0\2\3\5\0\1\3\1\225\4\3\1\0\7\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\1\3"+
    "\1\226\4\3\1\0\7\3\6\0\1\3\1\0\21\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\7\3\1\227\1\3\1\230\7\3\24\0\2\3"+
    "\5\0\1\231\5\3\1\0\7\3\6\0\1\3\1\0"+
    "\21\3\24\0\2\3\5\0\1\3\1\232\4\3\1\0"+
    "\7\3\6\0\1\3\1\0\21\3\24\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\7\3\1\233"+
    "\11\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\6\3\1\234\12\3\24\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\13\3\1\235"+
    "\5\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\3\3\1\236\15\3\34\0\1\237\76\0"+
    "\1\13\76\0\1\240\1\241\76\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\1\3\1\242\17\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\1\3\1\243\17\3\24\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\3\3\1\244\15\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\1\3\1\245\17\3\24\0\2\3\5\0\1\3"+
    "\1\246\4\3\1\0\7\3\6\0\1\3\1\0\21\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\1\3\1\247\17\3\24\0\2\3\5\0\6\3"+
    "\1\0\7\3\6\0\1\3\1\0\6\3\1\250\12\3"+
    "\24\0\2\3\5\0\6\3\1\0\7\3\6\0\1\3"+
    "\1\0\7\3\1\251\11\3\24\0\2\3\5\0\5\3"+
    "\1\252\1\0\7\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\7\3\1\253\11\3\24\0\2\3\5\0\6\3\1\0"+
    "\7\3\6\0\1\3\1\0\10\3\1\254\10\3\24\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\10\3\1\255\10\3\24\0\2\3\5\0\6\3\1\0"+
    "\7\3\6\0\1\3\1\0\10\3\1\256\10\3\24\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\2\3\1\257\16\3\35\0\1\260\73\0\1\241\76\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\5\3\1\261\13\3\24\0\2\3\5\0\6\3\1\0"+
    "\7\3\6\0\1\3\1\0\7\3\1\262\11\3\24\0"+
    "\2\3\5\0\1\263\5\3\1\0\7\3\6\0\1\3"+
    "\1\0\21\3\24\0\2\3\5\0\4\3\1\264\1\3"+
    "\1\0\7\3\6\0\1\3\1\0\21\3\24\0\2\3"+
    "\5\0\6\3\1\0\7\3\6\0\1\3\1\0\16\3"+
    "\1\265\2\3\24\0\2\3\5\0\1\266\5\3\1\0"+
    "\7\3\6\0\1\3\1\0\21\3\24\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\7\3\1\267"+
    "\11\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\16\3\1\270\2\3\24\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\7\3\1\271"+
    "\11\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\12\3\1\272\6\3\36\0\1\273\67\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\2\3\1\274\16\3\24\0\2\3\5\0\6\3\1\0"+
    "\7\3\6\0\1\3\1\0\7\3\1\275\11\3\24\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\1\3\1\276\17\3\24\0\2\3\5\0\6\3\1\0"+
    "\7\3\6\0\1\3\1\0\6\3\1\277\12\3\24\0"+
    "\2\3\5\0\1\3\1\300\4\3\1\0\7\3\6\0"+
    "\1\3\1\0\21\3\37\0\1\301\66\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\10\3\1\302"+
    "\10\3\24\0\2\3\5\0\6\3\1\0\7\3\6\0"+
    "\1\3\1\0\13\3\1\303\5\3\24\0\2\3\5\0"+
    "\1\3\1\304\4\3\1\0\7\3\6\0\1\3\1\0"+
    "\21\3\40\0\1\305\65\0\2\3\5\0\1\3\1\306"+
    "\4\3\1\0\7\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\6\3\1\0\7\3\6\0\1\3\1\0"+
    "\6\3\1\307\12\3\33\0\1\310\72\0\2\3\5\0"+
    "\6\3\1\0\7\3\6\0\1\3\1\0\12\3\1\311"+
    "\6\3\34\0\1\13\71\0\2\3\5\0\6\3\1\0"+
    "\7\3\6\0\1\3\1\0\16\3\1\312\2\3\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9306];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\1\11\25\1\2\11"+
    "\2\1\2\11\2\1\2\11\1\1\2\11\2\1\1\0"+
    "\2\11\4\1\1\0\1\11\1\1\1\0\2\1\2\11"+
    "\2\0\1\11\3\0\22\1\1\11\1\0\2\11\1\0"+
    "\6\11\1\1\2\11\1\1\1\11\2\1\3\0\4\1"+
    "\1\0\1\11\22\1\4\11\2\0\25\1\1\0\1\1"+
    "\1\11\16\1\1\0\12\1\1\0\5\1\1\0\3\1"+
    "\1\0\2\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* Para criar um novo java_cup.runtime.Symbol com informação sobre
       o token atual, mas esse tipo de token não tem valor associado.
    */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Também cria um new java_cup.runtime.Symbol Com informação
       sobre o token atual, mas esse objeto tem um valor. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Erro léxico caractere ilegal: \""+yytext()+
                                                              "\" na linha "+yyline+", coluna "+yycolumn);
            }
          case 82: break;
          case 2: 
            { System.out.print("\tidentifier: " + yytext()); return symbol(sym.IDENTIFIER, yytext());
            }
          case 83: break;
          case 3: 
            { /* Ignore */
            }
          case 84: break;
          case 4: 
            { System.out.print("\t" + yytext()); return symbol(sym.DIV);
            }
          case 85: break;
          case 5: 
            { System.out.print("\t" + yytext()); return symbol(sym.MULT);
            }
          case 86: break;
          case 6: 
            { /* ignore */
            }
          case 87: break;
          case 7: 
            { System.out.print("decimal: " + yytext());  return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 88: break;
          case 8: 
            { System.out.print("\toctal: " + yytext()); return symbol(sym.OCTAL_LITERAL, yytext());
            }
          case 89: break;
          case 9: 
            { System.out.print("\t" + yytext()); return symbol(sym.MINUS);
            }
          case 90: break;
          case 10: 
            { System.out.print("\t" + yytext()); return symbol(sym.DOT);
            }
          case 91: break;
          case 11: 
            { System.out.print("\t" + yytext()); return symbol(sym.PLUS);
            }
          case 92: break;
          case 12: 
            { System.out.print("\t" + yytext()); return symbol(sym.AND);
            }
          case 93: break;
          case 13: 
            { System.out.print("\t" + yytext()); return symbol(sym.EQ);
            }
          case 94: break;
          case 14: 
            { System.out.print("\t" + yytext()); return symbol(sym.NOT);
            }
          case 95: break;
          case 15: 
            { System.out.print("\t" + yytext()); return symbol(sym.LPAREN);
            }
          case 96: break;
          case 16: 
            { System.out.print("\t" + yytext()); return symbol(sym.RPAREN);
            }
          case 97: break;
          case 17: 
            { System.out.print("\t" + yytext()); return symbol(sym.PIPE);
            }
          case 98: break;
          case 18: 
            { System.out.print("\t" + yytext()); return symbol(sym.LT);
            }
          case 99: break;
          case 19: 
            { System.out.print("\t" + yytext()); return symbol(sym.LBRACK);
            }
          case 100: break;
          case 20: 
            { System.out.print("\t" + yytext()); return symbol(sym.RBRACK);
            }
          case 101: break;
          case 21: 
            { System.out.print("\t" + yytext()); return symbol(sym.CIRCU);
            }
          case 102: break;
          case 22: 
            { System.out.print("\t" + yytext()); return symbol(sym.GT);
            }
          case 103: break;
          case 23: 
            { System.out.print("\t" + yytext()); return symbol(sym.LBRACE);
            }
          case 104: break;
          case 24: 
            { System.out.print("\t" + yytext()); return symbol(sym.RBRACE);
            }
          case 105: break;
          case 25: 
            { System.out.print("\t" + yytext()); return symbol(sym.COLON);
            }
          case 106: break;
          case 26: 
            { System.out.print("\t" + yytext()); return symbol(sym.INFUNCEQ);
            }
          case 107: break;
          case 27: 
            { System.out.print("\t" + yytext()); return symbol(sym.SEMICOLON);
            }
          case 108: break;
          case 28: 
            { System.out.print("\t" + yytext()); return symbol(sym.MOD);
            }
          case 109: break;
          case 29: 
            { System.out.print("\t" + yytext()); return symbol(sym.DIVEQ);
            }
          case 110: break;
          case 30: 
            { System.out.print("\t" + yytext()); return symbol(sym.MULTEQ);
            }
          case 111: break;
          case 31: 
            { return symbol(sym.IF);
            }
          case 112: break;
          case 32: 
            { System.out.print("\tImaginary: " + yytext()); return symbol(sym.IMAGINARY_LITERAL, yytext());
            }
          case 113: break;
          case 33: 
            { System.out.print("float literal:" + yytext()); return symbol(sym.FLOATING_POINT_LITERAL, new Float(yytext()));
            }
          case 114: break;
          case 34: 
            { System.out.print("hex literal:" + yytext()); return symbol(sym.HEX_LITERAL, yytext());
            }
          case 115: break;
          case 35: 
            { System.out.print("\t" + yytext()); return symbol(sym.MINUSMINUS);
            }
          case 116: break;
          case 36: 
            { System.out.print("\t" + yytext()); return symbol(sym.MINUSEQ);
            }
          case 117: break;
          case 37: 
            { System.out.print("\tstring: " + yytext()); return symbol(sym.STRING_LITERAL, yytext());
            }
          case 118: break;
          case 38: 
            { return symbol(sym.GO);
            }
          case 119: break;
          case 39: 
            { System.out.print("\t" + yytext()); return symbol(sym.PLUSPLUS);
            }
          case 120: break;
          case 40: 
            { System.out.print("\t" + yytext()); return symbol(sym.ANDEQ);
            }
          case 121: break;
          case 41: 
            { System.out.print("\t" + yytext()); return symbol(sym.PLUSEQ);
            }
          case 122: break;
          case 42: 
            { System.out.print("\t" + yytext()); return symbol(sym.EQEQ);
            }
          case 123: break;
          case 43: 
            { System.out.print("\t" + yytext()); return symbol(sym.NOTEQ);
            }
          case 124: break;
          case 44: 
            { System.out.print("\t" + yytext()); return symbol(sym.PIPEEQ);
            }
          case 125: break;
          case 45: 
            { System.out.print("\t" + yytext()); return symbol(sym.PIPEPIPE);
            }
          case 126: break;
          case 46: 
            { System.out.print("\t" + yytext()); return symbol(sym.ARRLEFT);
            }
          case 127: break;
          case 47: 
            { System.out.print("\t" + yytext()); return symbol(sym.LTEQ);
            }
          case 128: break;
          case 48: 
            { System.out.print("\t" + yytext()); return symbol(sym.LSHIFT);
            }
          case 129: break;
          case 49: 
            { System.out.print("\t" + yytext()); return symbol(sym.CIRCUEQ);
            }
          case 130: break;
          case 50: 
            { System.out.print("\t" + yytext()); return symbol(sym.GTEQ);
            }
          case 131: break;
          case 51: 
            { System.out.print("\t" + yytext()); return symbol(sym.RSHIFT);
            }
          case 132: break;
          case 52: 
            { System.out.print("\t" + yytext()); return symbol(sym.MODEQ);
            }
          case 133: break;
          case 53: 
            { System.out.print("\t" + yytext()); return symbol(sym.ELLIPSIS);
            }
          case 134: break;
          case 54: 
            { return symbol(sym.FOR);
            }
          case 135: break;
          case 55: 
            { return symbol(sym.MAP);
            }
          case 136: break;
          case 56: 
            { return symbol(sym.VAR);
            }
          case 137: break;
          case 57: 
            { System.out.print("\t" + yytext()); return symbol(sym.ANDNOTEQ);
            }
          case 138: break;
          case 58: 
            { System.out.print("\t" + yytext()); return symbol(sym.ANDNOT);
            }
          case 139: break;
          case 59: 
            { System.out.print("\t" + yytext()); return symbol(sym.LSHIFTEQ);
            }
          case 140: break;
          case 60: 
            { System.out.print("\t" + yytext()); return symbol(sym.RSHIFTEQ);
            }
          case 141: break;
          case 61: 
            { System.out.print("Found traditional comment: " + yytext()); yyline++; yybegin(0);
            }
          case 142: break;
          case 62: 
            { return symbol(sym.ELSE);
            }
          case 143: break;
          case 63: 
            { System.out.print("\t" + yytext()); return symbol(sym.FUNC);
            }
          case 144: break;
          case 64: 
            { return symbol(sym.TYPE);
            }
          case 145: break;
          case 65: 
            { return symbol(sym.CASE);
            }
          case 146: break;
          case 66: 
            { return symbol(sym.CHAN);
            }
          case 147: break;
          case 67: 
            { return symbol(sym.GOTO);
            }
          case 148: break;
          case 68: 
            { return symbol(sym.BREAK);
            }
          case 149: break;
          case 69: 
            { return symbol(sym.RANGE);
            }
          case 150: break;
          case 70: 
            { return symbol(sym.DEFER);
            }
          case 151: break;
          case 71: 
            { return symbol(sym.CONST);
            }
          case 152: break;
          case 72: 
            { return symbol(sym.IMPORT);
            }
          case 153: break;
          case 73: 
            { return symbol(sym.RETURN);
            }
          case 154: break;
          case 74: 
            { return symbol(sym.SELECT);
            }
          case 155: break;
          case 75: 
            { return symbol(sym.SWITCH);
            }
          case 156: break;
          case 76: 
            { return symbol(sym.STRUCT);
            }
          case 157: break;
          case 77: 
            { return symbol(sym.DEFAULT);
            }
          case 158: break;
          case 78: 
            { System.out.print("\t" + yytext()); return symbol(sym.PACKAGE);
            }
          case 159: break;
          case 79: 
            { return symbol(sym.CONTINUE);
            }
          case 160: break;
          case 80: 
            { return symbol(sym.INTERFACE);
            }
          case 161: break;
          case 81: 
            { return symbol(sym.FALLTHROUGH);
            }
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexical [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexical scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexical(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
