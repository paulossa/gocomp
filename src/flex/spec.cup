/*
  This example comes from a short article series in the Linux
  Gazette by Richard A. Sevenich and Christopher Lopes, titled
  "Compiler Construction Tools". The article series starts at

  http://www.linuxgazette.com/issue39/sevenich.html

  Small changes and updates to newest JFlex+Cup versions
  by Gerwin Klein
*/

/*
  Commented By: Christopher Lopes
  File Name: ycalc.cup
  To Create: > java java_cup.Main < ycalc.cup
*/


/* ----------------------Preliminary Declarations Section--------------------*/

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.out.println(m);
        System.out.println(message);
        System.out.println(info);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

init with {:
  StringBuilder res_code = new StringBuilder();
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal BREAK;
terminal DEFAULT;
terminal FUNC;
terminal INTERFACE;
terminal SELECT;
terminal CASE;
terminal DEFER;
terminal GO;
terminal MAP;
terminal STRUCT;
terminal CHAN;
terminal ELSE;
terminal GOTO;
terminal PACKAGE;
terminal SWITCH;
terminal CONST;
terminal FALLTHROUGH;
terminal IF;
terminal RANGE;
terminal TYPE;
terminal CONTINUE;
terminal FOR;
terminal IMPORT;
terminal RETURN;
terminal VAR;

/* language terminals  */
terminal BOOLEAN; // primitive_type
terminal BYTE, SHORT, INT, LONG, CHAR; // integral_type
terminal FLOAT, DOUBLE; // floating_point_type
terminal LBRACK, RBRACK; // array_type
terminal DOT; // qualified_name
terminal SEMICOLON, MULT, COMMA, LBRACKET, RBRACKET, LBRACE, RBRACE, EQ, LPAREN, RPAREN, COLON;
terminal PLUSPLUS; // postincrement_expression
terminal MINUSMINUS; // postdecrement_expression
terminal PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal LSHIFT, RSHIFT, URSHIFT; // shift_expression
terminal LT, GT, LTEQ, GTEQ, INSTANCEOF; // relational_expression
terminal EQEQ, NOTEQ; // equality_expression
terminal AND; // and_expression
terminal XOR; // exclusive_or_expression
terminal OR;  // inclusive_or_expression
terminal ANDAND; // conditional_and_expression
terminal OROR; // conditional_or_expression
terminal QUESTION; // conditional_expression
terminal MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ; // assignment_operator
terminal LSHIFTEQ, RSHIFTEQ, URSHIFTEQ; // assignment_operator
terminal ANDEQ, XOREQ, OREQ; // assignment_operator

terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.Character CHARACTER_LITERAL;

terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER; // name

// 19.2) The Syntactic Grammar
non terminal goal;
// 19.3) Lexical Structure
non terminal literal;
// 19.4) Types, Values, and Variables
non terminal type, primitive_type, numeric_type;
non terminal integral_type, floating_point_type;
non terminal reference_type;
non terminal class_or_interface_type;
non terminal class_type, interface_type;
non terminal array_type;

non terminal compilation_unit;

non terminal package_declaration_opt, package_declaration, package_name;
non terminal import_declarations_opt, import_declarations, import_declaration;
non terminal func_declarations_opt, func_body;
non terminal Statements_opt, Statements, Statement;
non terminal top_level_decl;
non terminal param, params, params_opt;
non terminal arg, args, args_opt;
non terminal declaration;
non terminal const_decl, type_decl, var_decl, method_decl;
non terminal block;
non terminal EOF;


  start with goal;
  goal ::= compilation_unit:c {: RESULT = c; :};

  compilation_unit ::=
  		package_declaration_opt
  		import_declarations_opt
      top_level_decl
      {: RESULT = "cunitcode"; System.out.println("compilation_unit matched");  :}
  		;

  package_declaration_opt ::= package_declaration | ;
  import_declarations_opt ::= import_declarations | ;
  top_level_decl ::= declaration | func_declarations_opt | method_decl;
  declaration ::=  const_decl;

  const_decl ::= CONST IDENTIFIER EQ;

  package_declaration ::= PACKAGE package_name;
  package_name ::= IDENTIFIER;

  import_declarations ::=
  		import_declaration
  	|	import_declarations import_declaration
  	;

  func_declarations_opt ::=
    FUNC IDENTIFIER LPAREN args_opt RPAREN func_body;

  func_body ::= block;
  block ::= LBRACE Statements_opt RBRACE;
  Statements_opt ::=  | Statements;
  Statements ::= Statement
    | Statements Statement;
  Statement ::= IDENTIFIER LPAREN args_opt:i RPAREN {: System.out.println(i); :};
  args_opt ::= {:RESULT = ""; :}
    | args:a {: RESULT = a; :};
  args ::= arg:a {: RESULT = a; :}
    | args COMMA arg;
  arg ::= IDENTIFIER:i {: RESULT = i; :}
    | STRING_LITERAL:l {: RESULT = l; :};
  params_opt ::=  | params;
  params ::= param | params COMMA param;
  param ::= IDENTIFIER TYPE;
