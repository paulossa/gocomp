/* ----------------------Preliminary Declarations Section--------------------*/

/* Import the class java_cup.runtime.*  */
package go.core;
import java_cup.runtime.*;
import java.util.ArrayList;

init with {: Semantic.parser = this;              :};
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.out.println(m);
        System.out.println(message);
        System.out.println(info);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

init with {:
  StringBuilder res_code = new StringBuilder();
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal BREAK;
terminal DEFAULT;
terminal FUNC;
terminal INTERFACE;
terminal SELECT;
terminal CASE;
terminal DEFER;
terminal GO;
terminal MAP;
terminal STRUCT;
terminal CHAN;
terminal ELSE;
terminal GOTO;
terminal PACKAGE;
terminal SWITCH;
terminal CONST;
terminal FALLTHROUGH;
terminal IF;
terminal RANGE;
terminal TYPE;
terminal CONTINUE;
terminal FOR;
terminal IMPORT;
terminal RETURN;
terminal VAR;

/* language terminals  */
terminal BOOL; // primitive_type
terminal COMPLEX64, COMPLEX128; // complex types
terminal RUNE, BYTE, SHORT, UINTPTR, UINT8, UINT16, UINT32, UINT64, UINT, INT8, INT16, INT32, INT64, INT, LONG, CHAR; // integral_type
terminal FLOAT32, FLOAT64; // floating_point_type
terminal LBRACK, RBRACK; // array_type
terminal DOT; // qualified_name
terminal SEMICOLON, MULT, COMMA, LBRACKET, RBRACKET, LBRACE, RBRACE, EQ, LPAREN, RPAREN, COLON;
terminal PIPE, PIPEEQ, PIPEPIPE; // | ?
terminal PLUSPLUS; // postincrement_expression
terminal MINUSMINUS; // postdecrement_expression
terminal PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal LSHIFT, RSHIFT, URSHIFT; // shift_expression
terminal LT, GT, LTEQ, GTEQ; // relational_expression
terminal CIRCU, CIRCUEQ;
terminal ARRLEFT;
terminal INFUNCEQ;
terminal ELLIPSIS;

terminal COLONEQ; //Short var decl
terminal EQEQ, NOTEQ; // equality_expression
terminal AND; // and_expression
terminal ANDNOT;
terminal XOR; // exclusive_or_expression
terminal OR;  // inclusive_or_expression
terminal ANDAND; // conditional_and_expression
terminal OROR; // conditional_or_expression
terminal QUESTION; // conditional_expression
terminal MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ; // assignment_operator
terminal LSHIFTEQ, RSHIFTEQ, URSHIFTEQ; // assignment_operator
terminal ANDEQ, ANDNOTEQ, XOREQ, OREQ; // assignment_operator

terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.Number BOOLEAN_LITERAL;
terminal java.lang.Number CHARACTER_LITERAL;
terminal java.lang.Number HEX_LITERAL;

terminal java.lang.String IMAGINARY_LITERAL;
terminal java.lang.String OCTAL_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER; // name
terminal java.lang.String QUALIFIED_IDENTIFIER;

// 19.2) The Syntactic Grammar
non terminal goal;
non terminal operand, operandName;
non terminal assignment;
non terminal expression, unary_expression, primary_expression, primary_expression_b, return_opt;
non terminal index, slice_exp, selector, method_name, type_assertion, expression_list, expression_list_aux, identifier_list_aux, conversion;

// 19.3) Lexical Structure
non terminal 
	literal, func_literal, composite_literal, 
	literal_type, literal_value,
	composite_element_list, composite_key ;
non terminal operator, unary_operator;
non terminal binary_operator;
non terminal relational_operator;
non terminal add_operator;
non terminal mult_operator;
non terminal assign_operator;

// 19.4) Types, Values, and Variables
non terminal type, type_name, type_literal, type_opt;
non terminal slice_type, map_type, channel_type, channel_aux;
non terminal function_type;
non terminal signature, result, result_opt;
non terminal class_type, interface_type, method_spec, method_specs;
non terminal struct_type, field_declaration, embedded_field, comma_opt, tag_opt, field_declarations;
non terminal array_type;
non terminal pointer_type;

non terminal compilation_unit;

non terminal package_declaration_opt, package_name;
non terminal import_declaration;
non terminal func_declaration, func_body;
non terminal type_b;
non terminal Statements, Statement;
non terminal top_level_decl;
non terminal params, param_list, ellipsis_opt;
non terminal args, args_aux;
non terminal declaration;
non terminal const_decl, type_decl, type_decl_aux, type_spec, type_specs, alias_decl;
non terminal short_var_decl, type_def, var_decl, var_specs, var_spec, var_spec_aux, method_decl;
non terminal block;
non terminal EOF;
non terminal const_spec;
non terminal identifier_list;
non terminal top_import_decl;
non terminal const_spec_b;
non terminal if_stmt, else_stmt;
non terminal simple_stmt;
non terminal 
	type_list, switch_stmt_head,
	switch_stmt, switch_stmt_expr, switch_stmt_type, switch_stmt_guard,
	switch_stmt_type_head, switch_stmt_type_cases, switch_stmt_type_case,
	switch_stmt_expr_head, switch_stmt_expr_case, switch_stmt_expr_cases;
non terminal select_stmt, select_cases, select_case, return_stmt;
non terminal if_head;
non terminal simple_stmt_b;
non terminal simple_stmt_complete;
non terminal for_stmt, for_clause, for_head;
non terminal inc_dec_stmt, inc_dec;
non terminal range_cl_head, range_cl,range_op;
non terminal label_stmt, label, label_opt;
non terminal continue_stmt;
non terminal send_stmt;
non terminal go_stmt, goto_stmt;
non terminal break_stmt;
non terminal fall_stmt;
non terminal defer_stmt;

/* precedência de operadores, os de baixo tem maior precedência */

precedence left LPAREN;
precedence left PIPEPIPE;
precedence left ANDAND;
precedence left EQEQ, NOTEQ, LT, GT, LTEQ, GTEQ;
precedence left PIPE, PLUS, MINUS, CIRCU;
precedence left MULT, DIV, MOD, LSHIFT, RSHIFT, AND, ANDNOT;
precedence left NOT, ARRLEFT;


  start with goal;
  
  goal ::= compilation_unit:c {: RESULT = c; :};

  compilation_unit ::=
  		package_declaration_opt top_import_decl
      {: Semantic.getInstance().hw(); :};
      
  
  top_import_decl ::=  | import_declaration top_import_decl | top_level_decl top_import_decl;
  
  top_level_decl ::= declaration | func_declaration | method_decl;
  
  declaration ::=  const_decl | var_decl | type_decl;

  package_declaration_opt ::= | PACKAGE package_name;
  
  package_name ::= IDENTIFIER;
  	
  import_declaration ::= IMPORT STRING_LITERAL;

  func_declaration ::= FUNC IDENTIFIER params type_opt func_body;
  
  type_opt ::= | type_b | LPAREN identifier_list RPAREN | IDENTIFIER | QUALIFIED_IDENTIFIER;
 
  func_body ::= block  ;
  
  block ::= LBRACE Statements RBRACE;
  
  Statements ::= | Statement Statements;
  
  Statement ::= 
  	declaration | label_stmt | simple_stmt_b | goto_stmt | go_stmt | 
  	defer_stmt | fall_stmt | block | return_stmt | select_stmt |
  	continue_stmt | break_stmt | if_stmt | for_stmt | switch_stmt;
  
  return_stmt ::= RETURN SEMICOLON | RETURN expression_list;
  
  
  /* select */
  
  select_stmt ::= SELECT LBRACE select_cases RBRACE;
  
  select_cases ::= select_case COLON Statements select_cases | ;
  
  select_case ::= CASE expression_list range_op expression | CASE send_stmt | DEFAULT;
  
  /* select */
  
  
  /* switch */
	  switch_stmt_head ::= simple_stmt_b SEMICOLON ;
	  
	  switch_stmt ::= switch_stmt_expr | switch_stmt_type;
	  switch_stmt_expr ::= SWITCH switch_stmt_expr_head LBRACE switch_stmt_expr_cases RBRACE;
	  switch_stmt_expr_head ::=  switch_stmt_head expression | switch_stmt_head | expression | ;
	  switch_stmt_expr_cases ::= switch_stmt_expr_case COLON Statements switch_stmt_expr_cases | ;
	  switch_stmt_expr_case ::= CASE expression_list | DEFAULT;
	  
	  //TODO: Nao esta funcionando
	  switch_stmt_type ::= SWITCH switch_stmt_type_head LBRACE switch_stmt_type_cases RBRACE;
	  switch_stmt_type_head ::= switch_stmt_head switch_stmt_guard | switch_stmt_guard;
	  switch_stmt_type_cases ::= switch_stmt_type_case COLON Statements switch_stmt_type_cases |;
	  switch_stmt_type_case ::= CASE type_list | DEFAULT;
	  switch_stmt_guard ::= 
	 	primary_expression DOT LPAREN TYPE RPAREN;
	 	
		  		
  
  /* switch */
  
    
  // Em go os tipos dos parametros devem ser explicitados em declarações de funcao, porem caso
  // tenhamos varios parametros seguidos do mesmo tipo, podemos omitir o tipo deixando apenas o 
  // ultimo parametro com o tipo explicito.
  
  params ::= LPAREN param_list RPAREN;
  
  param_list ::= identifier_list ellipsis_opt type comma_opt param_list | ;
  
  comma_opt ::= COMMA | ;
  
  ellipsis_opt ::= ELLIPSIS | ;
  
  /* Types */
  
  type ::= 
  	type_name: o {: RESULT = o; :} | 
  	type_literal: o {: RESULT = o; :} | 
  	LPAREN type:o RPAREN {: RESULT = o; :} ;
  
  //sem ID e QUALIFIED_ID
  type_b ::= type_literal | LPAREN type_b RPAREN;
  
  type_literal ::= 
  	array_type: o {: RESULT = o; :} | 
  	struct_type: o {: RESULT = o; :} | 
  	pointer_type: o {: RESULT = o; :} | 
  	function_type: o {: RESULT = o; :} | 
  	interface_type: o {: RESULT = o; :} | 
  	map_type: o {: RESULT = o; :} | 
  	channel_type: o {: RESULT = o; :} | 
  	slice_type: o {: RESULT = o; :};
  	
  slice_type ::= LBRACK RBRACK type: o {: RESULT = o; :};
    
  type_name ::= 
  	QUALIFIED_IDENTIFIER: o {: RESULT = new Type(o); :} | 
  	IDENTIFIER: o {: RESULT = new Type(o); :};
  
  channel_type ::= 
  CHAN channel_aux type: o {: RESULT = o; :} | 
  ARRLEFT CHAN type: o {: RESULT = o; :};
  
  channel_aux ::= | ARRLEFT;
  
  pointer_type ::= MULT type: o {: RESULT = o; :};
  
  function_type ::= FUNC signature {: RESULT = new Type("function"); :};
  
  map_type ::= MAP LBRACK type RBRACK type: o {: RESULT = o; :};
  
  interface_type ::= INTERFACE LBRACE method_specs RBRACE: o {: RESULT = new Type("interface"); :};
  
  method_specs ::= method_spec method_specs | ;
  
  method_spec ::= IDENTIFIER signature | type_name;
  
  signature ::= params result_opt;
  
  result ::= type_b | LPAREN identifier_list RPAREN | IDENTIFIER | QUALIFIED_IDENTIFIER;
  
  result_opt ::= result | SEMICOLON;
  
  array_type ::=
  	LBRACK expression RBRACK type: o {: RESULT = o; :};
  	
   /* Struct type */
  	
	  struct_type ::=
	  	STRUCT LBRACE field_declarations RBRACE;
	  	
	  field_declarations ::= field_declarations field_declaration tag_opt | ;
	  
	  field_declaration ::= 
	  	IDENTIFIER embedded_field | 
	  	QUALIFIED_IDENTIFIER | 
	  	//IDENTIFIER | 
	  	MULT QUALIFIED_IDENTIFIER | 
	  	MULT IDENTIFIER;
	  	
  	  embedded_field ::= | COMMA IDENTIFIER embedded_field type;
	  	
	  tag_opt ::= | STRING_LITERAL;
	  
	  //embedded_field ::= MULT type_name | type_name;
	  
   /* Struct type */
  
  /* Types */
   
   
   
	
  literal ::= 
  	INTEGER_LITERAL: l {: RESULT = new Literal(new Type("int"), l); :} | 
  	FLOATING_POINT_LITERAL: l {: RESULT = new Literal(new Type("float"), l); :}| 
  	BOOLEAN_LITERAL: l {: RESULT = new Literal(new Type("bool"), l); :} | 
  	CHARACTER_LITERAL: l {: RESULT = l; :}|
    HEX_LITERAL : l {: RESULT = l; :} | 
    IMAGINARY_LITERAL: l {: RESULT = l; :}| 
    OCTAL_LITERAL: l {: RESULT = l; :}| 
    STRING_LITERAL: l {: RESULT = new Literal(new Type("string"), l); :}| 
    func_literal : l {: RESULT = l; :}| 
    composite_literal;
    
    
   composite_literal ::= literal_type | literal_value;
   
   
//   literal_type ::= type_b;
   
//   literal_value ::= LBRACE composite_element_list comma_opt RBRACE;
   
//   composite_element_list ::= composite_element | composite_element_list COMMA composite_element;
   
//   composite_key ::= IDENTIFIER | expression | literal_value;
   
//   composite_element ::= composite_key COLON | composite_key COLON expression | composite_key COLON literal_value;
   
   
  func_literal ::= FUNC signature func_body;
  
  binary_operator ::= 
  	PIPEPIPE :o {: RESULT = o; :} |
  	ANDAND   :o {: RESULT = o; :} |
   
  relational_operator : o {: RESULT = o;  :} |
  
  add_operator :o {: RESULT = o; :} |
  mult_operator :o {: RESULT = o; :};
  
  add_operator ::= PIPE :o {: RESULT = o; :} |
  PLUS :o {: RESULT = o; :} |
  MINUS :o {: RESULT = o; :} |
  CIRCU :o {: RESULT = o; :};
  
  relational_operator ::= EQEQ : o {: RESULT = o; :} |
  NOTEQ  : o {: RESULT = o; :} |
  LT     : o {: RESULT = o; :} |
  GT     : o {: RESULT = o; :} |
  LTEQ   : o {: RESULT = o; :} |
  GTEQ   : o {: RESULT = o; :};
  
  unary_operator ::= PLUS :o {: RESULT = o; :} |
  MINUS :o {: RESULT = o; :} |
  NOT :o {: RESULT = o; :} | 
  CIRCU :o {: RESULT = o; :} |
  MULT :o {: RESULT = o; :}|
  AND :o {: RESULT = o; :} |
  ARRLEFT :o {: RESULT = o; :};
  
  mult_operator ::= MULT :o {: RESULT = o; :} |
  DIV :o {: RESULT = o; :} |
  MOD :o {: RESULT = o; :} |
  LSHIFT :o {: RESULT = o; :} |
  RSHIFT :o {: RESULT = o; :} |
  AND :o {: RESULT = o; :} | 
  ANDNOT :o {: RESULT = o; :};
  
  assign_operator ::= 
  	MULTEQ:o {: RESULT = o; :}   | 
  	DIVEQ:o {: RESULT = o; :}   | 
  	MODEQ:o {: RESULT = o; :}   | 
  	LSHIFTEQ:o {: RESULT = o; :}   | 
  	RSHIFTEQ:o {: RESULT = o; :}   | 
  	ANDEQ:o {: RESULT = o; :}   | 
  	ANDNOTEQ:o {: RESULT = o; :}   |
  	PIPEEQ:o {: RESULT = o; :}   | 
  	PLUSEQ:o {: RESULT = o; :}   | 
  	MINUSEQ:o {: RESULT = o; :}   | 
  	CIRCUEQ:o {: RESULT = o; :}   | 
  	EQ:o {: RESULT = o; :}  ; 
   
  expression ::= unary_expression:o {: RESULT = o; :}  | 
  
  expression:e1 binary_operator:o expression:e2 {: 
	
	if(e1 == null || e2 == null){
		RESULT = null;
	}

	else RESULT = Semantic.getInstance().checkExpressionTypes(e1, e2, (String) o);

  :} ;
  
  unary_expression ::= 
  	primary_expression:o {: 
		if(o == null){
			RESULT = o;
		}
		else RESULT = Semantic.getInstance().getResultingExp(o, null); 
	:} | 
  	unary_operator:op unary_expression:o {: 
		if(o == null){
			RESULT = o;	
		}
		else RESULT = Semantic.getInstance().getResultingExp(o, (String) op); 
	:} ;
  
  primary_expression ::= 
  
	operand:o {: RESULT = o; :} |
	   
	conversion:o {: RESULT = o; :}  |
    
    method_name:o {: RESULT = o; :}  |
    
	primary_expression:p selector:o {: RESULT = o; :}  | 
    
	primary_expression:p index:o {: RESULT = o; :}  | 
    
	primary_expression:p slice_exp:o {: RESULT = o; :}  |
  	
	primary_expression:p type_assertion:o {: RESULT = o;   System.out.println("parte 1 = " + o + "parte 2" + p);:}  |
  	
	primary_expression:p args:o {: RESULT = o;:} ;
  		
	
  	/* Algumas regras estão comentadas para evitar ambiguidade 
  	   pois é possível derivá-las de outra forma */
  	  	

	
  args ::= 	
  		LPAREN args_aux RPAREN |
  		LPAREN RPAREN;
  		
  args_aux ::= expression_list | type_b COMMA expression_list;
	
	
  operand ::=   	
	  	literal : o {: RESULT = o; :} | 
	    IDENTIFIER : o {: 
			Semantic.getInstance().checkIfVariableDeclared(o);
			Type t = Semantic.getInstance().getVariableType(o);
			RESULT = new Identifier(t, o, null);
		:}| 
	    QUALIFIED_IDENTIFIER : o {: RESULT = o; :}| 
	    LPAREN expression RPAREN ;
	    
	    
  //conversion ::=		
  		//IDENTIFIER LPAREN expression RPAREN;
		
		
  selector ::= DOT IDENTIFIER;
  
  
  //method_name ::= 	    
	    //IDENTIFIER DOT IDENTIFIER;
	    
	    
  type_assertion ::= 
  		DOT LPAREN IDENTIFIER:o RPAREN {: RESULT = o; :};
  	
	
	
  /* Const Declaration */

  const_decl ::= CONST const_spec | CONST LPAREN const_spec_b RPAREN;

  const_spec ::= identifier_list type EQ expression_list | identifier_list EQ expression_list;
  
  const_spec_b ::= | identifier_list const_spec_b | identifier_list EQ expression_list const_spec_b;

  /* Const Declaration */
	

  /* IF Statement */
  
  if_stmt ::= 
  	IF if_head block |
  	IF if_head block else_stmt;
  	
  if_head ::= simple_stmt_complete SEMICOLON expression | expression;
  
  else_stmt ::= ELSE if_stmt | ELSE block;
  
  //TODO: adicionar inc dec stmt e short var decl
  simple_stmt ::= simple_stmt_complete SEMICOLON;
  simple_stmt_b ::=  expression | expression ARRLEFT expression | assignment | inc_dec_stmt | short_var_decl;
  simple_stmt_complete ::=  | expression | expression ARRLEFT expression | assignment | inc_dec_stmt | short_var_decl;
  
  /* IF Statement */
  
	
  /* Variable Declaration */
  
   short_var_decl ::= expression_list COLONEQ expression_list;
  
   var_decl ::= 
   	VAR var_spec: o {: RESULT = o; :} | 
   	VAR LPAREN var_specs:o RPAREN {: RESULT = o; :};
   
   var_specs ::= 
  	var_spec: o {: RESULT = o; :} | 
  	var_spec:o var_specs {: RESULT = o; :} ;
   
   var_spec ::= 
   		identifier_list:o
   		var_spec_aux:v {: 
			if(v == null){
				Semantic.getInstance().endReadIdList();
				//Semantic.getInstance().endReadExpList();
				RESULT = v;
			}

			else {
				Semantic.getInstance().endReadIdList();
				//Semantic.getInstance().endReadExpList();
				RESULT = v; 
			}
		:};
   		
   var_spec_aux ::=
   		 type: o {: 
			Semantic.getInstance().convertIdList((Type) o); 
			RESULT = o; 
		 :} |
   		 EQ expression_list:o {:
			if(o == null) {
				RESULT = o;
			} 
			else {
				Semantic.getInstance().convertIdList(o);  
				RESULT = o; 
			}
		:} |
   		 type:o EQ expression_list:e {:
			if(e == null){
				RESULT = e;
			}
			else {
				Semantic.getInstance().convertIdList((Type)o, e); 
				RESULT = o;
			}
		:};
   		
  /* Variable Declaration */
  

  /* Type Declaration */
  
    type_decl ::= TYPE type_decl_aux;
    
    type_decl_aux ::= type_spec | LPAREN type_specs RPAREN;
    
    type_spec ::= alias_decl | type_def;
    
    type_specs ::= type_spec| type_spec type_specs;
    
    type_def ::= IDENTIFIER type;
    
    alias_decl ::= IDENTIFIER EQ type;
  
  /* Type Declaration */

	/* For */
	
	for_stmt ::= FOR for_head block;
	for_head ::= | expression | for_clause | range_cl;
	
	for_clause ::= simple_stmt_complete SEMICOLON simple_stmt_complete SEMICOLON simple_stmt_complete;
	
	/* For */	
	
	/* Range Clause */
	
	range_cl ::= range_cl_head RANGE expression;
	
	range_cl_head ::= | expression_list range_op;
	range_op ::= EQ | COLONEQ;
	
	/* Range Clause */
	
	/* INC_DEC */
	
	inc_dec_stmt ::= expression inc_dec;
	inc_dec ::= PLUSPLUS | MINUSMINUS;
	
	/* INC_DEC */
	
	/* Label Statement */
	
	label_stmt ::= IDENTIFIER COLON Statement;
	label_opt ::= IDENTIFIER | SEMICOLON;
	/* Label Statement */
	
	/* Continue Statement */
	continue_stmt ::= CONTINUE label_opt;
	/* Continue Statement */
	
	/* Break Statement */
	break_stmt ::= BREAK label_opt;
	/* Break Statement */
	
	/* GOTO Statement */
	goto_stmt ::= GOTO IDENTIFIER;
	/* GOTO Statement */
	
	/* Send Statement */
	send_stmt ::= expression ARRLEFT expression;
	/* Send Statement */
	
	/* FALLTHROUGH Statement */
	fall_stmt ::= FALLTHROUGH;
	/* FALLTHROUGH Statement */
	
	/* DEFER Statement */
	defer_stmt ::= DEFER expression;
	/* DEFER Statement */
	
	go_stmt ::= GO expression;

  expression_list ::= 
  	expression:e expression_list_aux:c {: 
		if(e == null){
			RESULT = e;
		}	
		else {
			if(c == null){
				ArrayList<Expression> res = new ArrayList<Expression>();
				res.add(0, (Expression)e);
				RESULT = res;
			}
			else {
				((ArrayList<Expression>)c).add(0, (Expression) e);
				RESULT = c;
			}
		}
	:} ;
	
	expression_list_aux ::= 
		COMMA expression:e expression_list_aux: c {:
			if(c == null){
				ArrayList<Expression> res = new ArrayList<Expression>();
				res.add(0, (Expression)e);
				RESULT = res;
			}
			else {
				((ArrayList<Expression>)c).add(0, (Expression) e);
				RESULT = c;
			}
		:} | ;
  
  identifier_list ::= 
  	IDENTIFIER: i {: 
		Semantic.getInstance().readIdList(i);
		RESULT = i;
	:} | 
  	identifier_list:l COMMA IDENTIFIER: i {: 
		RESULT = Semantic.getInstance().readIdList(i).clone();
	:};
  
  
  type_list ::= type | type_list COMMA type;
 
  index ::= LBRACK expression RBRACK;

  slice ::= LBRACK expression COLON expression RBRACK | 
  	LBRACK expression COLON expression COLON expression RBRACK;
  
  assignment ::= 
  	expression_list:e1 assign_operator:op expression_list:e2 {:
		if(e1 != null && e2 != null){
			Semantic.getInstance().checkAssignment(e1, e2, op);
		}
	:};
   
