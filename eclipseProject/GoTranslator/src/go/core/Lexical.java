/* The following code was generated by JFlex 1.6.1 */

package go.core;

import java_cup.runtime.*;
/*

    OBSERVAÇÕES:

    Especificação do GO: https://golang.org/ref/spec#unicode_letter
    Exemplo para a linguagem JAVA: https://github.com/moy/JFlex/blob/master/jflex/examples/java/java.flex
    Documentação JFLEX: http://jflex.de/manual.html#ExampleLexRules
    Tutorialzinho legal: https://www.skenz.it/compilers/classroom/practice1_6.pdf
    Projeto de uma galera das antigas com JFLEX/Cup para C: https://github.com/brunomb/CCompiler

    Caracter "_" é considerado uma letra em GO.
    a-f dá matche em todos os caracteres de a até f
    [xX] dá matche em x ou X
    [^] dá matche em TODOS os caracteres
    [.] dá matche em todos os caracteres menos fim de linhas UNICODE

    Unicode letters = [:letter:]
    Unidode digits = [:digit:]

*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>eclipseWorkspace/GoTranslator/spec/rules.flex</tt>
 */
public class Lexical implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\30\1\31\1\2\22\0\1\66\1\67\1\32"+
    "\1\0\1\1\1\105\1\64\1\0\1\70\1\71\1\6\1\63\1\103"+
    "\1\24\1\25\1\5\1\17\1\53\1\54\1\56\1\52\1\21\1\51"+
    "\1\21\1\55\1\16\1\102\1\104\1\73\1\65\1\77\2\0\4\20"+
    "\1\23\1\20\21\15\1\22\2\15\1\74\1\27\1\75\1\76\1\12"+
    "\1\26\1\45\1\35\1\44\1\61\1\10\1\57\1\43\1\41\1\14"+
    "\1\15\1\60\1\13\1\46\1\7\1\42\1\47\1\15\1\33\1\40"+
    "\1\37\1\34\1\62\1\11\1\50\1\36\1\15\1\100\1\72\1\101"+
    "\7\0\1\30\34\0\4\1\4\0\1\15\12\0\1\15\4\0\1\15"+
    "\5\0\27\15\1\0\37\15\1\0\u01ca\15\4\0\14\15\16\0\5\15"+
    "\7\0\1\15\1\0\1\15\201\0\5\15\1\0\2\15\2\0\4\15"+
    "\1\0\1\15\6\0\1\15\1\0\3\15\1\0\1\15\1\0\24\15"+
    "\1\0\123\15\1\0\213\15\10\0\236\15\10\15\1\0\46\15\2\0"+
    "\1\15\7\0\47\15\7\0\1\1\100\0\33\15\5\0\3\15\30\0"+
    "\1\1\24\0\53\15\43\0\2\15\1\0\143\15\1\0\1\15\17\0"+
    "\2\15\7\0\2\15\12\0\3\15\2\0\1\15\20\0\1\15\1\0"+
    "\36\15\35\0\131\15\13\0\1\15\30\0\41\15\11\0\2\15\4\0"+
    "\1\15\5\0\26\15\4\0\1\15\11\0\1\15\3\0\1\15\27\0"+
    "\31\15\107\0\1\15\1\15\13\15\6\15\121\0\66\15\3\0\1\15"+
    "\22\0\1\15\7\0\12\15\17\0\7\15\1\15\7\15\1\15\4\0"+
    "\10\15\2\0\2\15\2\0\26\15\1\0\7\15\1\0\1\15\3\0"+
    "\4\15\3\0\1\15\20\0\1\15\15\0\2\15\1\0\3\15\16\0"+
    "\2\15\2\1\7\0\1\1\11\0\6\15\4\0\2\15\2\0\26\15"+
    "\1\0\7\15\1\0\2\15\1\0\2\15\1\0\2\15\37\0\4\15"+
    "\1\0\1\15\23\0\3\15\20\0\11\15\1\0\3\15\1\0\26\15"+
    "\1\0\7\15\1\0\2\15\1\0\5\15\3\0\1\15\22\0\1\15"+
    "\17\0\2\15\17\0\1\1\23\0\10\15\2\0\2\15\2\0\26\15"+
    "\1\0\7\15\1\0\2\15\1\0\5\15\3\0\1\15\36\0\2\15"+
    "\1\0\3\15\17\0\1\15\21\0\1\15\1\0\6\15\3\0\3\15"+
    "\1\0\4\15\3\0\2\15\1\0\1\15\1\0\2\15\3\0\2\15"+
    "\3\0\3\15\3\0\14\15\26\0\1\15\50\0\1\1\13\0\10\15"+
    "\1\0\3\15\1\0\27\15\1\0\12\15\1\15\5\15\3\0\1\15"+
    "\32\0\2\15\6\0\2\15\43\0\10\15\1\0\3\15\1\0\27\15"+
    "\1\0\12\15\1\0\5\15\3\0\1\15\40\0\1\15\1\0\2\15"+
    "\17\0\2\15\22\0\10\15\1\0\3\15\1\0\51\15\2\0\1\15"+
    "\20\0\1\15\21\0\2\15\30\0\6\15\5\0\22\15\3\0\30\15"+
    "\1\0\11\15\1\0\1\15\2\0\7\15\72\0\60\15\1\0\2\15"+
    "\13\0\1\1\7\15\72\0\2\15\1\0\1\15\2\0\2\15\1\0"+
    "\1\15\2\0\1\15\6\0\4\15\1\0\7\15\1\0\3\15\1\0"+
    "\1\15\1\0\1\15\2\0\2\15\1\0\4\15\1\0\2\15\11\0"+
    "\1\15\2\0\5\15\1\0\1\15\25\0\4\15\40\0\1\15\77\0"+
    "\10\15\1\0\44\15\33\0\5\15\163\0\53\15\24\0\1\15\20\0"+
    "\6\15\4\0\4\15\3\0\1\15\3\0\2\15\7\0\3\15\4\0"+
    "\15\15\14\0\1\15\21\0\46\15\1\0\1\15\5\0\1\15\2\0"+
    "\53\15\1\0\u014d\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0"+
    "\4\15\2\0\51\15\1\0\4\15\2\0\41\15\1\0\4\15\2\0"+
    "\7\15\1\0\1\15\1\0\4\15\2\0\17\15\1\0\71\15\1\0"+
    "\4\15\2\0\103\15\45\0\20\15\20\0\125\15\14\0\u026c\15\2\0"+
    "\21\15\1\0\32\15\5\0\113\15\3\0\3\1\10\15\7\0\15\15"+
    "\1\0\4\15\16\0\22\15\16\0\22\15\16\0\15\15\1\0\3\15"+
    "\17\0\64\15\43\0\1\15\3\0\1\1\1\15\103\0\130\15\10\0"+
    "\51\15\1\0\1\15\5\0\106\15\12\0\35\15\2\15\61\0\36\15"+
    "\2\0\5\15\13\0\54\15\25\0\7\15\70\0\27\15\11\0\65\15"+
    "\122\0\1\15\135\0\57\15\21\0\7\15\67\0\36\15\15\0\2\15"+
    "\12\0\54\15\32\0\44\15\51\0\3\15\12\0\44\15\153\0\4\15"+
    "\1\0\4\15\3\0\2\15\11\0\300\15\100\0\u0116\15\2\0\6\15"+
    "\2\0\46\15\2\0\6\15\2\0\10\15\1\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\37\15\2\0\65\15\1\0\7\15\1\0\1\15"+
    "\3\0\3\15\1\0\7\15\3\0\4\15\2\0\6\15\4\0\15\15"+
    "\5\0\3\15\1\0\7\15\53\0\1\30\1\30\25\0\2\1\23\0"+
    "\1\1\34\0\1\15\15\0\1\15\20\0\15\15\3\0\33\1\107\0"+
    "\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3\0\5\15\6\0"+
    "\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0\13\15\2\0"+
    "\4\15\5\0\5\15\4\0\1\15\21\0\43\1\2\15\4\1\u0a77\0"+
    "\57\15\1\0\57\15\1\0\205\15\6\0\4\15\3\0\2\15\14\0"+
    "\46\15\1\0\1\15\5\0\1\15\2\0\70\15\7\0\1\15\20\0"+
    "\27\15\11\0\7\15\1\0\7\15\1\0\7\15\1\0\7\15\1\0"+
    "\7\15\1\0\7\15\1\0\7\15\1\0\7\15\120\0\1\15\u01d5\0"+
    "\2\15\1\1\31\0\11\1\7\0\5\15\2\0\3\1\2\15\4\0"+
    "\126\15\6\0\3\15\1\0\132\15\1\0\4\15\5\0\51\15\3\0"+
    "\136\15\21\0\33\15\65\0\20\15\u0200\0\u19b6\15\112\0\u51cd\15\63\0"+
    "\u048d\15\103\0\56\15\2\0\u010d\15\3\0\20\15\12\0\2\15\24\0"+
    "\57\15\20\0\31\15\6\15\2\0\106\15\12\1\47\0\11\15\2\0"+
    "\147\15\2\0\4\15\1\0\4\15\14\15\13\15\3\15\2\0\2\15"+
    "\105\0\1\15\12\15\1\0\3\15\1\0\4\15\1\0\27\15\25\0"+
    "\1\1\7\0\64\15\16\0\62\15\76\0\6\15\3\0\1\15\16\0"+
    "\34\15\12\0\27\15\31\0\35\15\7\0\57\15\34\0\1\15\20\0"+
    "\5\15\1\0\12\15\12\0\5\15\1\0\51\15\27\0\3\15\1\0"+
    "\10\15\24\0\27\15\3\0\1\15\3\0\2\15\60\15\1\0\1\15"+
    "\3\0\2\15\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15"+
    "\2\0\13\15\7\0\3\15\14\0\6\15\2\0\6\15\2\0\6\15"+
    "\11\0\7\15\1\0\7\15\1\0\53\15\1\0\4\15\4\0\2\15"+
    "\132\0\43\15\35\0\u2ba4\15\14\0\27\15\4\0\61\15\u2104\0\u016e\15"+
    "\2\0\152\15\46\0\7\15\14\0\5\15\5\0\1\15\1\0\12\15"+
    "\1\0\15\15\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15"+
    "\1\0\154\15\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0\14\15"+
    "\1\1\66\0\2\1\30\0\3\1\31\0\1\1\6\0\5\15\1\0"+
    "\207\15\7\0\1\1\34\0\32\15\4\0\1\1\1\0\32\15\13\0"+
    "\131\15\3\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0"+
    "\2\1\3\0\2\1\31\0\14\15\1\0\32\15\1\0\23\15\1\0"+
    "\2\15\1\0\17\15\2\0\16\15\42\0\173\15\105\0\65\1\u010b\0"+
    "\35\15\3\0\61\15\57\0\37\15\1\15\20\0\21\15\1\1\10\15"+
    "\1\1\5\0\46\15\12\0\36\15\2\0\44\15\4\0\10\15\1\0"+
    "\5\1\52\0\236\15\142\0\50\15\10\0\64\15\234\0\u0137\15\11\0"+
    "\26\15\12\0\10\15\230\0\6\15\2\0\1\15\1\0\54\15\1\0"+
    "\2\15\3\0\1\15\2\0\27\15\12\0\27\15\11\0\37\15\141\0"+
    "\26\15\12\0\32\15\106\0\70\15\6\0\2\15\100\0\1\15\17\0"+
    "\4\15\1\0\3\15\1\0\33\15\54\0\35\15\3\0\35\15\43\0"+
    "\10\15\1\0\34\15\33\0\66\15\12\0\26\15\12\0\23\15\15\0"+
    "\22\15\156\0\111\15\u03ba\0\65\15\113\0\55\15\40\0\31\15\32\0"+
    "\44\15\51\0\43\15\3\0\1\15\14\0\60\15\16\0\4\15\25\0"+
    "\1\15\45\0\22\15\1\0\31\15\204\0\57\15\46\0\10\15\2\0"+
    "\2\15\2\0\26\15\1\0\7\15\1\0\2\15\1\0\5\15\3\0"+
    "\1\15\37\0\5\15\u011e\0\60\15\24\0\2\15\1\0\1\15\270\0"+
    "\57\15\121\0\60\15\24\0\1\15\73\0\53\15\u01f5\0\100\15\37\0"+
    "\1\15\u01c0\0\71\15\u0507\0\u036f\15\52\15\147\0\143\1\u0b9d\0\u042f\15"+
    "\u33d1\0\u0239\15\7\0\37\15\161\0\36\15\22\0\60\15\20\0\4\15"+
    "\37\0\25\15\5\0\23\15\u0370\0\105\15\13\0\1\15\102\0\15\15"+
    "\u4060\0\2\15\u0bfe\0\153\15\5\0\15\15\3\0\11\15\7\0\12\15"+
    "\u1766\0\125\15\1\0\107\15\1\0\2\15\2\0\1\15\2\0\2\15"+
    "\2\0\4\15\1\0\14\15\1\0\1\15\1\0\7\15\1\0\101\15"+
    "\1\0\4\15\2\0\10\15\1\0\7\15\1\0\34\15\1\0\4\15"+
    "\1\0\5\15\1\0\1\15\3\0\7\15\1\0\u0154\15\2\0\31\15"+
    "\1\0\31\15\1\0\37\15\1\0\31\15\1\0\37\15\1\0\31\15"+
    "\1\0\37\15\1\0\31\15\1\0\37\15\1\0\31\15\1\0\10\15"+
    "\u1034\0\305\15\u053b\0\4\15\1\0\33\15\1\0\2\15\1\0\1\15"+
    "\2\0\1\15\1\0\12\15\1\0\4\15\1\0\1\15\1\0\1\15"+
    "\6\0\1\15\4\0\1\15\1\0\1\15\1\0\1\15\1\0\3\15"+
    "\1\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\2\15\1\0\1\15\2\0\4\15"+
    "\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\1\0\12\15"+
    "\1\0\21\15\5\0\3\15\1\0\5\15\1\0\21\15\u1144\0\ua6d7\15"+
    "\51\0\u1035\15\13\0\336\15\u3fe2\0\u021e\15\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\4\6\1\7"+
    "\1\10\1\11\1\12\2\1\14\6\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\6"+
    "\1\0\1\35\1\36\4\0\1\37\1\0\1\40\1\41"+
    "\1\0\1\10\1\42\1\43\1\44\2\0\1\45\17\0"+
    "\1\46\13\0\1\47\1\0\1\50\1\51\1\0\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\2\6\5\0\1\65\1\0\1\41\1\0"+
    "\1\66\21\0\1\67\3\0\1\70\2\0\1\71\1\72"+
    "\1\73\1\74\1\75\2\0\1\76\1\77\1\100\3\0"+
    "\1\101\3\0\1\102\1\0\1\103\1\0\1\104\1\105"+
    "\1\106\4\0\1\107\1\110\1\111\3\0\1\112\2\0"+
    "\1\113\4\0\2\76\1\0\1\114\1\115\1\116\2\0"+
    "\1\117\3\0\1\120\1\0\1\121\3\0\1\122\1\0"+
    "\1\123\4\0\1\124\3\0\1\125\1\126\1\0\1\127"+
    "\1\130\1\131\1\132\1\133\1\134\11\0\1\135\2\0"+
    "\1\136\1\137\1\140\1\0\1\141\2\0\1\142\4\0"+
    "\1\143\1\144\3\0\1\145\1\0\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\214\0\106\0\322\0\u0118\0\106"+
    "\0\u015e\0\u01a4\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\106\0\106\0\u0834\0\u087a\0\106\0\106\0\u08c0"+
    "\0\u0906\0\106\0\106\0\u094c\0\106\0\106\0\u0992\0\u09d8"+
    "\0\u0a1e\0\106\0\106\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\106"+
    "\0\u0b7c\0\106\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\106\0\106"+
    "\0\u0cda\0\u0348\0\106\0\u0d20\0\u038e\0\u0d66\0\u0dac\0\u0df2"+
    "\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022"+
    "\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252"+
    "\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\106\0\u143c"+
    "\0\106\0\106\0\u1482\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\u14c8\0\106\0\106\0\u150e\0\106\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\106\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4"+
    "\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\106\0\u1cfc\0\u1d42\0\u1d88\0\106"+
    "\0\u1dce\0\u1e14\0\106\0\106\0\106\0\106\0\106\0\u1e5a"+
    "\0\u1ea0\0\u1ee6\0\106\0\106\0\u1f2c\0\u1f72\0\u1fb8\0\106"+
    "\0\u1ffe\0\u2044\0\u208a\0\106\0\u20d0\0\u2116\0\u215c\0\106"+
    "\0\106\0\106\0\u21a2\0\u21e8\0\u222e\0\u2274\0\106\0\106"+
    "\0\106\0\u22ba\0\u2300\0\u2346\0\106\0\u238c\0\u23d2\0\106"+
    "\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\106\0\u2576\0\106"+
    "\0\106\0\106\0\u25bc\0\u2602\0\106\0\u2648\0\u268e\0\u26d4"+
    "\0\106\0\u271a\0\106\0\u2760\0\u27a6\0\u27ec\0\106\0\u2832"+
    "\0\106\0\u2878\0\u28be\0\u2904\0\u294a\0\106\0\u2990\0\u29d6"+
    "\0\u2a1c\0\106\0\106\0\u2a62\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06"+
    "\0\u2c4c\0\u2c92\0\u2cd8\0\106\0\u2d1e\0\u2d64\0\106\0\106"+
    "\0\106\0\u2daa\0\106\0\u2df0\0\u2e36\0\106\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\106\0\106\0\u2f94\0\u2fda\0\u3020\0\106"+
    "\0\u3066\0\106";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\2\10\1\12\1\13\1\10\1\14\1\15\1\10\1\14"+
    "\2\10\1\16\1\17\1\20\2\2\1\5\1\21\1\22"+
    "\1\23\1\24\1\10\1\25\1\26\2\10\1\27\1\30"+
    "\1\10\1\31\1\32\1\10\6\14\1\33\1\10\1\34"+
    "\1\35\1\36\1\37\1\40\1\5\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\111\0\1\5\107\0\1\60"+
    "\1\61\56\0\1\62\105\0\1\63\33\0\1\64\134\0"+
    "\1\65\52\0\1\66\36\0\1\67\10\0\1\70\36\0"+
    "\1\71\3\0\1\72\1\0\2\14\1\0\1\14\1\0"+
    "\1\71\1\0\1\73\23\0\6\14\37\0\1\71\5\0"+
    "\1\74\1\75\1\0\1\75\1\76\1\71\1\0\1\73"+
    "\22\0\1\76\4\75\1\74\1\75\53\0\1\77\40\0"+
    "\1\100\36\0\2\73\1\0\1\73\3\0\1\101\23\0"+
    "\6\73\27\0\26\102\1\103\1\104\56\102\27\105\1\106"+
    "\2\105\1\103\53\105\10\0\1\107\23\0\1\110\10\0"+
    "\1\111\54\0\1\112\124\0\1\113\2\0\1\114\3\0"+
    "\1\115\101\0\1\116\57\0\1\117\1\120\25\0\1\121"+
    "\1\0\1\122\106\0\1\123\104\0\1\124\1\125\2\0"+
    "\1\126\105\0\1\127\105\0\1\130\53\0\1\131\20\0"+
    "\1\132\5\0\1\133\2\0\1\134\50\0\1\135\142\0"+
    "\1\136\123\0\1\137\1\0\1\140\104\0\1\141\1\142"+
    "\10\0\1\143\74\0\1\144\105\0\1\145\105\0\1\146"+
    "\4\0\1\147\37\0\1\150\40\0\1\151\5\0\1\152"+
    "\77\0\1\153\105\0\1\154\11\0\1\155\73\0\1\62"+
    "\105\0\1\156\20\0\3\157\1\160\102\157\5\161\1\162"+
    "\1\163\77\161\40\0\1\164\54\0\1\165\135\0\1\166"+
    "\115\0\1\167\54\0\2\170\1\0\1\170\2\0\1\171"+
    "\24\0\6\170\4\0\1\171\32\0\1\71\3\0\1\72"+
    "\1\0\2\73\1\0\1\73\1\0\1\71\25\0\6\73"+
    "\37\0\1\71\5\0\2\74\1\0\1\74\1\0\1\71"+
    "\1\0\1\73\23\0\6\74\37\0\1\71\5\0\1\74"+
    "\1\75\1\0\1\75\1\0\1\71\1\0\1\73\23\0"+
    "\4\75\1\74\1\75\37\0\1\76\5\0\4\76\1\0"+
    "\1\76\11\0\1\76\6\0\2\76\3\0\7\76\1\0"+
    "\1\76\51\0\1\172\60\0\2\102\2\0\24\102\2\0"+
    "\54\102\2\105\2\0\24\105\2\0\54\105\37\0\1\173"+
    "\55\0\1\174\105\0\1\175\105\0\1\176\106\0\1\177"+
    "\134\0\1\200\110\0\1\201\112\0\1\202\51\0\1\203"+
    "\106\0\1\204\124\0\1\205\114\0\1\206\102\0\1\207"+
    "\113\0\1\210\47\0\1\211\36\0\1\212\77\0\1\213"+
    "\114\0\1\214\102\0\1\215\103\0\1\216\52\0\1\217"+
    "\131\0\1\220\65\0\1\221\151\0\1\222\61\0\1\223"+
    "\140\0\1\142\104\0\1\224\1\225\104\0\1\226\105\0"+
    "\1\227\20\0\3\157\1\10\102\157\7\0\1\230\76\0"+
    "\5\161\1\0\1\163\77\161\6\0\1\231\104\0\1\232"+
    "\110\0\1\233\140\0\1\234\52\0\1\235\40\0\1\236"+
    "\1\0\1\237\1\0\1\240\1\241\71\0\1\242\57\0"+
    "\1\72\1\0\2\170\1\0\1\170\27\0\6\170\45\0"+
    "\2\170\1\0\1\170\27\0\6\170\63\0\1\243\61\0"+
    "\1\244\140\0\1\245\101\0\1\246\113\0\1\247\50\0"+
    "\1\250\110\0\1\251\102\0\1\252\105\0\1\253\134\0"+
    "\1\254\102\0\1\255\104\0\1\256\114\0\1\257\52\0"+
    "\1\260\23\0\1\261\111\0\1\262\1\263\114\0\1\264"+
    "\46\0\1\265\155\0\1\266\72\0\1\267\104\0\1\270"+
    "\54\0\1\271\102\0\1\272\34\0\1\273\50\0\1\274"+
    "\102\0\1\10\102\0\1\275\1\276\135\0\1\277\124\0"+
    "\1\300\104\0\1\301\110\0\1\302\64\0\1\303\105\0"+
    "\1\304\62\0\1\305\144\0\1\306\1\0\1\307\1\0"+
    "\1\310\1\0\1\311\1\312\107\0\1\313\71\0\1\314"+
    "\105\0\1\315\105\0\1\316\100\0\1\317\62\0\1\320"+
    "\130\0\1\321\61\0\1\322\137\0\1\323\77\0\1\324"+
    "\105\0\1\325\101\0\1\326\106\0\1\327\62\0\1\330"+
    "\77\0\1\276\161\0\1\331\65\0\1\332\55\0\1\333"+
    "\135\0\1\334\120\0\1\335\104\0\1\336\110\0\1\337"+
    "\70\0\1\340\107\0\1\341\103\0\1\342\55\0\1\343"+
    "\106\0\1\344\140\0\1\345\113\0\1\346\4\0\1\347"+
    "\70\0\1\350\57\0\1\351\104\0\1\352\140\0\1\353"+
    "\73\0\1\354\106\0\1\355\121\0\1\356\45\0\1\357"+
    "\147\0\1\360\107\0\1\361\64\0\1\362\111\0\1\363"+
    "\61\0\1\364\136\0\1\365\51\0\1\366\146\0\1\367"+
    "\1\0\1\370\74\0\1\371\57\0\1\372\101\0\1\373"+
    "\147\0\1\374\107\0\1\375\65\0\1\376\60\0\1\377"+
    "\153\0\1\u0100\73\0\1\u0101\52\0\1\10\136\0\1\u0102"+
    "\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\2\1\1\11\31\1\2\11"+
    "\2\1\2\11\2\1\2\11\1\1\2\11\2\1\1\0"+
    "\2\11\4\0\1\11\1\0\1\11\1\1\1\0\2\1"+
    "\2\11\2\0\1\11\17\0\1\1\13\0\1\11\1\0"+
    "\2\11\1\0\6\11\1\1\2\11\1\1\1\11\2\1"+
    "\5\0\1\1\1\0\1\1\1\0\1\11\21\0\1\11"+
    "\3\0\1\11\2\0\5\11\2\0\1\1\2\11\3\0"+
    "\1\11\3\0\1\11\1\0\1\1\1\0\3\11\4\0"+
    "\3\11\3\0\1\11\2\0\1\11\4\0\1\1\1\11"+
    "\1\0\3\11\2\0\1\11\3\0\1\11\1\0\1\11"+
    "\3\0\1\11\1\0\1\11\4\0\1\11\3\0\2\11"+
    "\1\0\6\11\11\0\1\11\2\0\3\11\1\0\1\11"+
    "\2\0\1\11\4\0\2\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /* Para criar um novo java_cup.runtime.Symbol com informação sobre
       o token atual, mas esse tipo de token não tem valor associado.
    */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Também cria um new java_cup.runtime.Symbol Com informação
       sobre o token atual, mas esse objeto tem um valor. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexical(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2482) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Erro léxico caractere ilegal: \""+yytext()+
                                                              "\" na linha "+yyline+", coluna "+yycolumn);
            }
          case 103: break;
          case 2: 
            { System.out.print("found id: " + yytext()); return symbol(sym.IDENTIFIER, yytext());
            }
          case 104: break;
          case 3: 
            { /* Ignore */
            }
          case 105: break;
          case 4: 
            { System.out.print("\t" + yytext()); return symbol(sym.DIV);
            }
          case 106: break;
          case 5: 
            { System.out.print("\t" + yytext()); return symbol(sym.MULT);
            }
          case 107: break;
          case 6: 
            { /* ignore */
            }
          case 108: break;
          case 7: 
            { System.out.print("decimal: " + yytext());  return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
            }
          case 109: break;
          case 8: 
            { System.out.print("\toctal: " + yytext()); return symbol(sym.OCTAL_LITERAL, yytext());
            }
          case 110: break;
          case 9: 
            { System.out.print("\t" + yytext()); return symbol(sym.MINUS);
            }
          case 111: break;
          case 10: 
            { System.out.print("\t" + yytext()); return symbol(sym.DOT);
            }
          case 112: break;
          case 11: 
            { System.out.print("\t" + yytext()); return symbol(sym.PLUS);
            }
          case 113: break;
          case 12: 
            { System.out.print("\t" + yytext()); return symbol(sym.AND);
            }
          case 114: break;
          case 13: 
            { System.out.print("\t" + yytext()); return symbol(sym.EQ);
            }
          case 115: break;
          case 14: 
            { System.out.print("\t" + yytext()); return symbol(sym.NOT);
            }
          case 116: break;
          case 15: 
            { System.out.print("\t" + yytext()); return symbol(sym.LPAREN);
            }
          case 117: break;
          case 16: 
            { System.out.print("\t" + yytext()); return symbol(sym.RPAREN);
            }
          case 118: break;
          case 17: 
            { System.out.print("\t" + yytext()); return symbol(sym.PIPE);
            }
          case 119: break;
          case 18: 
            { System.out.print("\t" + yytext()); return symbol(sym.LT);
            }
          case 120: break;
          case 19: 
            { System.out.print("\t" + yytext()); return symbol(sym.LBRACK);
            }
          case 121: break;
          case 20: 
            { System.out.print("\t" + yytext()); return symbol(sym.RBRACK);
            }
          case 122: break;
          case 21: 
            { System.out.print("\t" + yytext()); return symbol(sym.CIRCU);
            }
          case 123: break;
          case 22: 
            { System.out.print("\t" + yytext()); return symbol(sym.GT);
            }
          case 124: break;
          case 23: 
            { System.out.print("\t" + yytext()); return symbol(sym.LBRACE);
            }
          case 125: break;
          case 24: 
            { System.out.print("\t" + yytext()); return symbol(sym.RBRACE);
            }
          case 126: break;
          case 25: 
            { System.out.print("\t" + yytext()); return symbol(sym.COLON);
            }
          case 127: break;
          case 26: 
            { System.out.print("\t" + yytext()); return symbol(sym.COMMA);
            }
          case 128: break;
          case 27: 
            { System.out.print("\t" + yytext()); return symbol(sym.SEMICOLON);
            }
          case 129: break;
          case 28: 
            { System.out.print("\t" + yytext()); return symbol(sym.MOD);
            }
          case 130: break;
          case 29: 
            { System.out.print("\t" + yytext()); return symbol(sym.DIVEQ);
            }
          case 131: break;
          case 30: 
            { System.out.print("\t" + yytext()); return symbol(sym.MULTEQ);
            }
          case 132: break;
          case 31: 
            { return symbol(sym.IF);
            }
          case 133: break;
          case 32: 
            { System.out.print("\tImaginary: " + yytext()); return symbol(sym.IMAGINARY_LITERAL, yytext());
            }
          case 134: break;
          case 33: 
            { System.out.print("float literal:" + yytext()); return symbol(sym.FLOATING_POINT_LITERAL, new Float(yytext()));
            }
          case 135: break;
          case 34: 
            { System.out.print("hex literal:" + yytext()); return symbol(sym.HEX_LITERAL, yytext());
            }
          case 136: break;
          case 35: 
            { System.out.print("\t" + yytext()); return symbol(sym.MINUSMINUS);
            }
          case 137: break;
          case 36: 
            { System.out.print("\t" + yytext()); return symbol(sym.MINUSEQ);
            }
          case 138: break;
          case 37: 
            { System.out.print("\tstring: " + yytext()); return symbol(sym.STRING_LITERAL, yytext());
            }
          case 139: break;
          case 38: 
            { return symbol(sym.GO);
            }
          case 140: break;
          case 39: 
            { System.out.print("\t" + yytext()); return symbol(sym.PLUSPLUS);
            }
          case 141: break;
          case 40: 
            { System.out.print("\t" + yytext()); return symbol(sym.ANDEQ);
            }
          case 142: break;
          case 41: 
            { System.out.print("\t" + yytext()); return symbol(sym.PLUSEQ);
            }
          case 143: break;
          case 42: 
            { System.out.print("\t" + yytext()); return symbol(sym.EQEQ);
            }
          case 144: break;
          case 43: 
            { System.out.print("\t" + yytext()); return symbol(sym.NOTEQ);
            }
          case 145: break;
          case 44: 
            { System.out.print("\t" + yytext()); return symbol(sym.PIPEEQ);
            }
          case 146: break;
          case 45: 
            { System.out.print("\t" + yytext()); return symbol(sym.PIPEPIPE);
            }
          case 147: break;
          case 46: 
            { System.out.print("\t" + yytext()); return symbol(sym.ARRLEFT);
            }
          case 148: break;
          case 47: 
            { System.out.print("\t" + yytext()); return symbol(sym.LTEQ);
            }
          case 149: break;
          case 48: 
            { System.out.print("\t" + yytext()); return symbol(sym.LSHIFT);
            }
          case 150: break;
          case 49: 
            { System.out.print("\t" + yytext()); return symbol(sym.CIRCUEQ);
            }
          case 151: break;
          case 50: 
            { System.out.print("\t" + yytext()); return symbol(sym.GTEQ);
            }
          case 152: break;
          case 51: 
            { System.out.print("\t" + yytext()); return symbol(sym.RSHIFT);
            }
          case 153: break;
          case 52: 
            { System.out.print("\t" + yytext()); return symbol(sym.MODEQ);
            }
          case 154: break;
          case 53: 
            { System.out.println("found int"); return symbol(sym.INT);
            }
          case 155: break;
          case 54: 
            { System.out.print("\t" + yytext()); return symbol(sym.ELLIPSIS);
            }
          case 156: break;
          case 55: 
            { return symbol(sym.MAP);
            }
          case 157: break;
          case 56: 
            { return symbol(sym.FOR);
            }
          case 158: break;
          case 57: 
            { return symbol(sym.VAR);
            }
          case 159: break;
          case 58: 
            { System.out.print("\t" + yytext()); return symbol(sym.ANDNOTEQ);
            }
          case 160: break;
          case 59: 
            { System.out.print("\t" + yytext()); return symbol(sym.ANDNOT);
            }
          case 161: break;
          case 60: 
            { System.out.print("\t" + yytext()); return symbol(sym.LSHIFTEQ);
            }
          case 162: break;
          case 61: 
            { System.out.print("\t" + yytext()); return symbol(sym.RSHIFTEQ);
            }
          case 163: break;
          case 62: 
            { System.out.print("Found traditional comment: " + yytext()); yyline++; yybegin(0);
            }
          case 164: break;
          case 63: 
            { return symbol(sym.ELSE);
            }
          case 165: break;
          case 64: 
            { return symbol(sym.LONG);
            }
          case 166: break;
          case 65: 
            { return symbol(sym.INT8);
            }
          case 167: break;
          case 66: 
            { return symbol(sym.RUNE);
            }
          case 168: break;
          case 67: 
            { return symbol(sym.UINT);
            }
          case 169: break;
          case 68: 
            { return symbol(sym.BYTE);
            }
          case 170: break;
          case 69: 
            { return symbol(sym.BOOL);
            }
          case 171: break;
          case 70: 
            { return symbol(sym.TYPE);
            }
          case 172: break;
          case 71: 
            { return symbol(sym.GOTO);
            }
          case 173: break;
          case 72: 
            { return symbol(sym.CHAN);
            }
          case 174: break;
          case 73: 
            { return symbol(sym.CHAR);
            }
          case 175: break;
          case 74: 
            { return symbol(sym.CASE);
            }
          case 176: break;
          case 75: 
            { return symbol(sym.FUNC);
            }
          case 177: break;
          case 76: 
            { return symbol(sym.INT64);
            }
          case 178: break;
          case 77: 
            { return symbol(sym.INT16);
            }
          case 179: break;
          case 78: 
            { return symbol(sym.INT32);
            }
          case 180: break;
          case 79: 
            { return symbol(sym.RANGE);
            }
          case 181: break;
          case 80: 
            { return symbol(sym.UINT8);
            }
          case 182: break;
          case 81: 
            { return symbol(sym.BREAK);
            }
          case 183: break;
          case 82: 
            { return symbol(sym.SHORT);
            }
          case 184: break;
          case 83: 
            { return symbol(sym.CONST);
            }
          case 185: break;
          case 84: 
            { return symbol(sym.DEFER);
            }
          case 186: break;
          case 85: 
            { return symbol(sym.IMPORT);
            }
          case 187: break;
          case 86: 
            { return symbol(sym.RETURN);
            }
          case 188: break;
          case 87: 
            { return symbol(sym.UINT64);
            }
          case 189: break;
          case 88: 
            { return symbol(sym.UINT16);
            }
          case 190: break;
          case 89: 
            { return symbol(sym.UINT32);
            }
          case 191: break;
          case 90: 
            { return symbol(sym.SELECT);
            }
          case 192: break;
          case 91: 
            { return symbol(sym.SWITCH);
            }
          case 193: break;
          case 92: 
            { return symbol(sym.STRUCT);
            }
          case 194: break;
          case 93: 
            { return symbol(sym.UINTPTR);
            }
          case 195: break;
          case 94: 
            { return symbol(sym.PACKAGE);
            }
          case 196: break;
          case 95: 
            { return symbol(sym.FLOAT64);
            }
          case 197: break;
          case 96: 
            { return symbol(sym.FLOAT32);
            }
          case 198: break;
          case 97: 
            { return symbol(sym.DEFAULT);
            }
          case 199: break;
          case 98: 
            { return symbol(sym.CONTINUE);
            }
          case 200: break;
          case 99: 
            { return symbol(sym.INTERFACE);
            }
          case 201: break;
          case 100: 
            { return symbol(sym.COMPLEX64);
            }
          case 202: break;
          case 101: 
            { return symbol(sym.COMPLEX128);
            }
          case 203: break;
          case 102: 
            { return symbol(sym.FALLTHROUGH);
            }
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexical [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexical scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexical(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
