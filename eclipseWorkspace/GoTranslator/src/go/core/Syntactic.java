
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 07 20:20:16 GFT 2018
//----------------------------------------------------

package go.core;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 07 20:20:16 GFT 2018
  */
public class Syntactic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntactic() {super();}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntactic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\016" +
    "\005\000\002\017\003\000\002\017\002\000\002\022\003" +
    "\000\002\022\002\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\041\003\000\002\042\005\000\002" +
    "\020\004\000\002\021\003\000\002\023\003\000\002\023" +
    "\004\000\002\025\010\000\002\026\003\000\002\046\005" +
    "\000\002\027\002\000\002\027\003\000\002\030\003\000" +
    "\002\030\004\000\002\031\006\000\002\040\002\000\002" +
    "\040\003\000\002\037\003\000\002\037\005\000\002\036" +
    "\003\000\002\036\003\000\002\035\002\000\002\035\003" +
    "\000\002\034\003\000\002\034\005\000\002\033\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\010\006\ufffd\021\007\023\ufffd\001\002\000" +
    "\006\006\ufffb\023\ufffb\001\002\000\004\002\013\001\002" +
    "\000\006\006\ufffe\023\ufffe\001\002\000\004\147\012\001" +
    "\002\000\004\002\000\001\002\000\006\006\ufff5\023\ufff5" +
    "\001\002\000\006\006\ufff4\023\ufff4\001\002\000\004\002" +
    "\001\001\002\000\006\006\ufff3\023\ufff3\001\002\000\006" +
    "\006\ufffc\023\ufffc\001\002\000\006\006\020\023\017\001" +
    "\002\000\004\147\054\001\002\000\004\147\026\001\002" +
    "\000\004\002\ufff8\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\ufff9\001\002\000\004\002\ufff7\001\002\000\004" +
    "\002\ufffa\001\002\000\004\060\027\001\002\000\010\061" +
    "\uffe9\146\034\147\033\001\002\000\004\061\037\001\002" +
    "\000\006\052\uffe7\061\uffe7\001\002\000\006\052\035\061" +
    "\uffe8\001\002\000\006\052\uffe5\061\uffe5\001\002\000\006" +
    "\052\uffe4\061\uffe4\001\002\000\006\146\034\147\033\001" +
    "\002\000\006\052\uffe6\061\uffe6\001\002\000\004\055\040" +
    "\001\002\000\006\056\uffee\147\045\001\002\000\004\002" +
    "\ufff0\001\002\000\004\002\ufff1\001\002\000\004\056\053" +
    "\001\002\000\006\056\uffec\147\uffec\001\002\000\004\060" +
    "\050\001\002\000\006\056\uffed\147\045\001\002\000\006" +
    "\056\uffeb\147\uffeb\001\002\000\010\061\uffe9\146\034\147" +
    "\033\001\002\000\004\061\052\001\002\000\006\056\uffea" +
    "\147\uffea\001\002\000\004\002\uffef\001\002\000\004\057" +
    "\055\001\002\000\004\002\ufff6\001\002\000\006\006\ufff2" +
    "\023\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\054\000\012\002\004\016\007\017\003\020\005\001" +
    "\001\000\010\022\015\023\014\024\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\055\001\001\000" +
    "\014\025\022\032\021\041\024\042\023\045\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\030\037\031\040" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\035\001\001\000\002\001\001\000\006\026\041\046\040" +
    "\001\001\000\010\027\042\030\045\031\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\046\001\001\000" +
    "\002\001\001\000\010\036\030\037\031\040\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntactic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntactic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntactic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Semantic.parser = this;              
    }



    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.out.println(m);
        System.out.println(message);
        System.out.println(info);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntactic$actions {
  private final Syntactic parser;

  /** Constructor */
  CUP$Syntactic$actions(Syntactic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntactic$do_action(
    int                        CUP$Syntactic$act_num,
    java_cup.runtime.lr_parser CUP$Syntactic$parser,
    java.util.Stack            CUP$Syntactic$stack,
    int                        CUP$Syntactic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntactic$result;

      /* select the action based on the action number */
      switch (CUP$Syntactic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= IDENTIFIER TYPE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("param",25, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // params ::= params COMMA param 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params ::= param 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("params",26, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params_opt ::= params 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("params_opt",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params_opt ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("params_opt",27, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arg ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = l; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("arg",28, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arg ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = i; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("arg",28, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // args ::= args COMMA arg 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("args",29, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // args ::= arg 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = a; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("args",29, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // args_opt ::= args 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = a; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("args_opt",30, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // args_opt ::= 
            {
              Object RESULT =null;
		RESULT = ""; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("args_opt",30, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= IDENTIFIER LPAREN args_opt RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		 System.out.println(i); 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Statement",23, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-3)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statements ::= Statements Statement 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Statements",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statements ::= Statement 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Statements",22, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statements_opt ::= Statements 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Statements_opt",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statements_opt ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("Statements_opt",21, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // block ::= LBRACE Statements_opt RBRACE 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_body ::= block 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("func_body",20, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_declarations_opt ::= FUNC IDENTIFIER LPAREN args_opt RPAREN func_body 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("func_declarations_opt",19, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-5)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // import_declarations ::= import_declarations import_declaration 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("import_declarations",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // import_declarations ::= import_declaration 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("import_declarations",17, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // package_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("package_name",15, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // package_declaration ::= PACKAGE package_name 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("package_declaration",14, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // const_decl ::= CONST IDENTIFIER EQ 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("const_decl",32, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= const_decl 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("declaration",31, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_level_decl ::= method_decl 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("top_level_decl",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_level_decl ::= func_declarations_opt 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("top_level_decl",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_level_decl ::= declaration 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("top_level_decl",24, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("import_declarations_opt",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_declarations_opt ::= import_declarations 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("import_declarations_opt",16, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_declaration_opt ::= 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_declaration_opt ::= package_declaration 
            {
              Object RESULT =null;

              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("package_declaration_opt",13, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= package_declaration_opt import_declarations_opt top_level_decl 
            {
              Object RESULT =null;
		 RESULT = "cunitcode"; System.out.println("compilation_unit matched");  
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("compilation_unit",12, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-2)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.peek()).value;
		 RESULT = c; 
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("goal",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          return CUP$Syntactic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)).value;
		RESULT = start_val;
              CUP$Syntactic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntactic$stack.elementAt(CUP$Syntactic$top-1)), ((java_cup.runtime.Symbol)CUP$Syntactic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntactic$parser.done_parsing();
          return CUP$Syntactic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

